{"version":3,"file":"index.cjs","sources":["../src/core/lib/errors.ts","../src/core/lib/hashCode.ts","../src/core/lib/peek.ts","../src/core/BufferParser.ts","../src/core/lib/math.ts","../src/core/lib/scalar.ts","../src/core/lib/bitmask.ts","../src/core/lib/utf8.ts","../src/core/lib/float16.ts","../src/core/lib/coders.ts","../src/core/config.ts","../src/core/lib/BufferWriter.ts","../src/core/lib/BufferReader.ts","../src/core/Type.ts","../src/core/BufferFormat.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unified-signatures */\n\nexport class TinybufError extends Error {}\n\nexport class EncodeError extends TinybufError {\n  public constructor(message: string)\n  public constructor(expectedType: string, value: any)\n  public constructor(a: string, b?: any) {\n    super(`failed to encode '${a}' (data: ${b})`);\n  }\n}\n\nexport class DecodeError extends TinybufError {\n  public constructor(\n    summary: string,\n    public readonly cause: Error,\n  ) {\n    super(`${summary}: ${cause.message}`);\n    this.stack = cause.stack;\n  }\n}\n","/**\n * DJB2 hash algorithm (modified for 16-bit uints).\n *\n * DJB2 is a simple and widely used non-cryptographic\n * hash function created by Daniel J. Bernstein.\n *\n * @returns 16-bit unsigned integer\n */\nexport function $hashCode(str: string): number {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return hash & 0xFFFF; // Ensure the result is a Uint16\n}\n\n/**\n * Returns an unsigned 16-bit integer hashcode for some string.\n * Prefers 2 character string.\n *\n * @returns A UInt16 between 0 and 65535 (inclusive).\n */\nexport function $strToHashCode(str: string): number {\n  if (str.length !== 2) return $hashCode(str);\n  return str.charCodeAt(0) * 256 + str.charCodeAt(1);\n}\n\n/**\n * Convert a UInt16 hashcode to a 2-byte string.\n */\nexport function $hashCodeToStr(hashCode: number): string {\n  return String.fromCharCode(Math.floor(hashCode / 256)) + String.fromCharCode(hashCode % 256);\n}\n","import { $hashCodeToStr } from \"./hashCode\";\n\n\n/**\n * Read the header bytes of a buffer as a number.\n *\n * @throws {RangeError} if buffer size < 2\n */\nexport function peekHeader(b: ArrayBuffer | ArrayBufferView): number {\n  return (ArrayBuffer.isView(b) ? new DataView(b.buffer, b.byteOffset, 2) : new DataView(b, 0, 2)).getUint16(0, false);\n}\n\n/**\n * Read the header bytes of a buffer as a string.\n *\n * @throws {RangeError} if buffer length < 2\n */\nexport function peekHeaderStr(b: ArrayBuffer | ArrayBufferView): string {\n  return $hashCodeToStr(peekHeader(b));\n}\n","import { BufferFormat } from \"./BufferFormat\";\nimport { EncoderDefinition, InferredDecodedType } from \"./Type\";\nimport { DecodeError, TinybufError } from \"./lib/errors\";\nimport { $hashCodeToStr, $strToHashCode } from \"./lib/hashCode\";\nimport { peekHeader } from \"./lib/peek\";\n\ntype AnyFormat = BufferFormat<any, any>;\ntype Uint16FormatHeader = number;\n\n/**\n * Small utility for registering and processing format handlers.\n *\n * @example\n * const myHandler = bufferParser()\n *   .on(FormatA, aData => {})\n *   .on(FormatB, bData => {});\n *\n * myHandler.processBuffer(bytes);\n */\nexport const bufferParser = (): BufferParser => new BufferParser();\n\nexport class BufferParser {\n  /** @internal */\n  private _$formats = new Map<Uint16FormatHeader, [AnyFormat, (data: any) => any]>();\n\n  /**\n   * Decode an array buffer and trigger the relevant data handler.\n   *\n   * When passed an ArrayBufferView, accesses the underlying 'buffer' instance directly.\n   *\n   * @throws {TinybufError} if fails to decode, or no handler is registered\n   */\n  public processBuffer(b: ArrayBuffer | ArrayBufferView): void {\n    let f: any, data: any, cb: (data: any) => any;\n\n    try {\n      const header = peekHeader(b);\n\n      if (!this._$formats.has(header)) {\n        throw new TinybufError(`Unknown format: ${header} '${$hashCodeToStr(header)}')`);\n      }\n\n      [f, cb] = this._$formats.get(header);\n      data = f.decode(b);\n    }\n    catch (e) {\n      throw new DecodeError('Failed to decode', e);\n    }\n\n    cb(data);\n  }\n\n  /**\n   * Register a format handler.\n   */\n  public on<EncoderType extends EncoderDefinition, DecodedType = InferredDecodedType<EncoderType>>(\n    format: BufferFormat<EncoderType, string | number>,\n    callback: (data: DecodedType) => any,\n    overwritePrevious: boolean = false,\n  ): this {\n    if (format.header == null) {\n      throw new TinybufError('Format requires header');\n    }\n\n    const header = typeof format.header === 'string' ? $strToHashCode(format.header) : format.header;\n\n    if (this._$formats.has(header) && !overwritePrevious) {\n      throw new TinybufError(`Format header collision: ${format.header}`);\n    }\n\n    this._$formats.set(header, [format, callback]);\n\n    return this;\n  }\n\n  /** Register a format (or formats) that are recognized. */\n  public ignore(...format: AnyFormat[]): this {\n    format.forEach(f => this.on(f, () => {}, true));\n    return this;\n  }\n\n  /** Clears all registered formats and handlers. */\n  public clear(): void {\n    this._$formats.clear();\n  }\n}\n","export const $floor = Math.floor,\n  $ceil = Math.ceil;\n\n/** Clamp a number to a range. */\nexport const $clamp = (value: number, min: number, max: number): number =>\n  value > max ? max : value < min ? min : value;\n\n/** Round toward zero */\nexport const $roundTowardZero = (x: number): number => x < 0 ? $ceil(x) : $floor(x);\n\n/** Round away zero */\nexport const $roundAwayFromZero = (x: number): number =>\n  x < 0 ? $floor(x) : $ceil(x);\n","import { $clamp, $roundTowardZero, $roundAwayFromZero } from \"./math\";\n\n/**\n * Quantize a number to an 8-bit scalar between 0.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function uscalround(x: number): number {\n  return $fromuscal8($touscal8(x));\n}\n\n/**\n * Quantize a number to an 8-bit signed scalar between -1.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function scalround(x: number): number {\n  return $fromscal8($toscal8(x));\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $touscal8(x: number): number {\n  return $clamp(127 + $roundTowardZero(x * 254 - 127), 0, 254);\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $toscal8(x: number): number {\n  return $clamp($roundTowardZero(x * 127), -127, 127) + 127;\n}\n\n/** @returns An unsigned scalar between 0.0 and 1.0. */\nexport function $fromuscal8(x: number): number {\n  // Make symmetric: (0.5 + round((uint8 - 127) / 254 * 100)) / 100\n  return $clamp(($roundAwayFromZero((x - 127) * 0.3937007874015748) + 50) * 0.01, 0, 1);\n}\n\n/** @returns A signed scalar between -1.0 and 1.0. */\nexport function $fromscal8(x: number): number {\n  // Make symmetric: round((uint8 - 127) / 127 * 100) / 100\n  return $clamp($roundAwayFromZero((x - 127) * 0.787401574803149) * 0.01, -1, 1);\n}\n","export const mask = (x: boolean[]): number => {\n  if (x.length > 30) x = x.slice(0, 30);\n  return x.reduce((n, b: any) => (n << 1) | b, 1 /* pad */);\n};\n\nexport const unmask = (x: number, len = 31 - Math.clz32(x) /* pad bit + 1 */): boolean[] => {\n  const result = new Array<boolean>(len);\n  for (let i = 0; i < len; i++) result[i] = !!(x & (1 << (len - 1 - i)));\n  return result;\n};\n","const encoder = new TextEncoder();\nconst decoder = new TextDecoder('utf-8');\n\nexport const $utf8encode = (x?: string): Uint8Array => encoder.encode(x);\nexport const $utf8decode = (y: Uint8Array): string => decoder.decode(y);\n","/**\n * Returns the nearest half precision float representation of a number.\n * @param x A numeric expression.\n */\nexport function f16round(x: number): number {\n  return $fromf16($tof16(x));\n}\n\n/**\n * Returns the nearest half precision float representation of a number as a 16-bit bitmask.\n */\nexport const $tof16 = (function() {\n  const x = new Float32Array(1);\n  const y = new Int32Array(x.buffer);\n\n  return function (f: number) {\n    x[0] = f;\n    let i = y[0]; // 32-bit int\n    let s = (i >> 16) & 0X8000; // sign\n    let z = (i & 0X7FFFFFFF) + 0X1000 | 0;\n\n    if (z >= 0X47800000) {\n      if ((i & 0X7FFFFFFF) < 0X47800000) return s | 0X7BFF;\n      if (z < 0X7F800000) return s | 0X7C00;\n      return s | 0X7C00 | (i & 0X007FFFFF) >> 13;\n    }\n    if (z >= 0X38800000) return s | z - 0X38000000 >> 13;\n    else if (z < 0X33000000) return s;\n    z = (i & 0X7FFFFFFF) >> 23;\n    return s | ((i & 0X7FFFFF | 0X800000)\n      + (0X800000 >>> z - 102)\n      >> 126 - z);\n  };\n}());\n\n/**\n * Returns the nearest half precision float value for a 16-bit bitmask.\n */\nexport const $fromf16 = (function() {\n  const z = Math.pow(2, -24); // subnormal constant\n  const d = new Float32Array(32 + 1024);\n  for (let e = 0; e < 32; e++) d[e] = Math.pow(2, e - 15); // biased exponents\n  for (let m = 0; m < 1024; m++) d[m + 0x20] = 1 + m / 1024; // normalized offset mantissas\n\n  return function (b: number): number {\n    const s = (b & 32768) === 32768 ? -1 : 1; // sign: 1 bit\n    const e = b & 31744; // exponent: 5 bits\n    const m = b & 1023; // mantissa: 10 bits\n\n    if (e === 0) return m === 0 ? s * 0 : s * z;\n    if (e === 31744) return m === 0 ? s * Infinity : NaN;\n    return d[e >> 10] * d[m + 0x20] * s;\n  };\n}());\n","import { BufferWriter } from './BufferWriter';\nimport { BufferReader } from './BufferReader';\nimport {\n  $fromuscal8,\n  $fromscal8,\n  $touscal8,\n  $toscal8\n} from './scalar';\nimport { Type } from '../Type';\nimport { mask, unmask } from './bitmask';\nimport { $utf8decode, $utf8encode } from './utf8';\nimport { $floor } from './math';\nimport { $fromf16, $tof16 } from './float16';\n\n// Pre-calculated constants\nconst MAX_VARUINT8 = 128,\n  MAX_VARUINT16 = 16_384,\n  MAX_VARUINT32 = 536_870_912,\n  MAX_VARINT8 = 64,\n  MAX_VARINT16 = 8_192,\n  MAX_VARINT32 = 268_435_456,\n  POW_32 = 0x100000000;\n\ntype WriterFn<T> = (value: T, writer: BufferWriter) => void;\ntype ReaderFn<T> = (reader: BufferReader) => T;\n\nexport interface BinaryTypeCoder<T, R = T> {\n  $write: WriterFn<T>;\n  $read: ReaderFn<R>;\n}\n\n/**\n * Format (big-endian):\n * 7b   0xxx xxxx\n * 14b  10xx xxxx  xxxx xxxx\n * 29b  110x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n * 61b  111x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n */\nexport const uintCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (value < MAX_VARUINT8) {\n      writer.$writeUint8(value);\n    }\n    else if (value < MAX_VARUINT16) {\n      writer.$writeUint16(value + 0x8000);\n    }\n    else if (value < MAX_VARUINT32) {\n      writer.$writeUint32(value + 0xc0000000);\n    }\n    else {\n      writer.$writeUint32($floor(value / POW_32) + 0xe0000000);\n      writer.$writeUint32(value >>> 0);\n    }\n  },\n  $read: (reader) => {\n    const firstByte = reader.$peek();\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      return reader.$readUint16() - 0x8000;\n    }\n    else if (!(firstByte & 0x20)) {\n      return reader.$readUint32() - 0xc0000000;\n    }\n\n    return (reader.$readUint32() - 0xe0000000) * POW_32\n      + reader.$readUint32();\n  }\n};\n\nexport const uint8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8(value),\n  $read: (reader) => reader.$readUint8(),\n};\n\nexport const uint16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint16(value),\n  $read: (reader) => reader.$readUint16(),\n};\n\nexport const uint32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint32(value),\n  $read: (reader) => reader.$readUint32(),\n};\n\n/**\n * Format (big-endian):\n * 7b   0xxx xxxx\n * 14b  10xx xxxx  xxxx xxxx\n * 29b  110x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n * 61b  111x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n */\nexport const intCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (value >= -MAX_VARINT8 && value < MAX_VARINT8) {\n      writer.$writeUint8(value & 0x7f);\n    }\n    else if (value >= -MAX_VARINT16 && value < MAX_VARINT16) {\n      writer.$writeUint16((value & 0x3fff) + 0x8000);\n    }\n    else if (value >= -MAX_VARINT32 && value < MAX_VARINT32) {\n      writer.$writeUint32((value & 0x1fffffff) + 0xc0000000);\n    }\n    else {\n      const intValue = value;\n      // Split in two 32b uints\n      writer.$writeUint32(($floor(intValue / POW_32) & 0x1fffffff) + 0xe0000000);\n      writer.$writeUint32(intValue >>> 0);\n    }\n  },\n  $read: (reader) => {\n    let firstByte = reader.$peek(), i: number;\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return (firstByte & 0x40) ? (firstByte | 0xffffff80) : firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      i = reader.$readUint16() - 0x8000;\n      return (i & 0x2000) ? (i | 0xffffc000) : i;\n    }\n    else if (!(firstByte & 0x20)) {\n      i = reader.$readUint32() - 0xc0000000;\n      return (i & 0x10000000) ? (i | 0xe0000000) : i;\n    }\n    else {\n      i = reader.$readUint32() - 0xe0000000;\n      i = (i & 0x10000000) ? (i | 0xe0000000) : i;\n      return i * POW_32 + reader.$readUint32();\n    }\n  }\n};\n\nexport const int8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt8(value),\n  $read: (reader) => reader.$readInt8(),\n};\n\nexport const int16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt16(value),\n  $read: (reader) => reader.$readInt16(),\n};\n\nexport const int32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt32(value),\n  $read: (reader) => reader.$readInt32(),\n};\n\nexport const float16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint16($tof16(value)),\n  $read: (reader) => $fromf16(reader.$readUint16()),\n};\n\nexport const float32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat32(value),\n  $read: (reader) => reader.$readFloat32(),\n};\n\nexport const float64Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat64(value),\n  $read: (reader) => reader.$readFloat64(),\n};\n\nexport const uscalar8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8($touscal8(value)),\n  $read: (reader) => $fromuscal8(reader.$readUint8()),\n};\n\nexport const scalar8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8($toscal8(value)),\n  $read: (reader) => $fromscal8(reader.$readUint8()),\n};\n\nexport const dateCoder: BinaryTypeCoder<Date> = {\n  $write: (value, writer) => intCoder.$write(value.getTime(), writer),\n  $read: (reader) => new Date(intCoder.$read(reader)),\n};\n\nexport const stringCoder: BinaryTypeCoder<string> = {\n  $write: (value, writer) => bufferCoder.$write($utf8encode(value), writer),\n  $read: (reader) => $utf8decode(bufferCoder.$read(reader)),\n};\n\nexport const bufferCoder: BinaryTypeCoder<ArrayBuffer | ArrayBufferView, Uint8Array> = {\n  $write: (value, writer) => {\n    uintCoder.$write(value.byteLength, writer); // header byte (length)\n    writer.$writeBuffer(value);\n  },\n  $read: (reader) => reader.$readBuffer(uintCoder.$read(reader)),\n};\n\nexport const boolCoder: BinaryTypeCoder<boolean> = {\n  $write: (value, writer) => writer.$writeUint8(value ? 1 : 0),\n  $read: (reader) => reader.$readUint8() !== 0,\n};\n\nexport const boolsCoder: BinaryTypeCoder<boolean[]> = {\n  $write: (value, writer) => uintCoder.$write(mask(value), writer),\n  $read: (reader) => unmask(uintCoder.$read(reader)),\n};\n\nexport const jsonCoder: BinaryTypeCoder<any> = {\n  $write: (value, writer) => stringCoder.$write(JSON.stringify(value), writer),\n  $read: (reader) => JSON.parse(stringCoder.$read(reader)),\n};\n\nexport const regexCoder: BinaryTypeCoder<RegExp> = {\n  $write: (value, writer) => {\n    writer.$writeUint8(mask([value.global, value.ignoreCase, value.multiline]));\n    stringCoder.$write(value.source, writer);\n  },\n  $read: (reader) => {\n    const [g, i, m] = unmask(reader.$readUint8());\n    return new RegExp(stringCoder.$read(reader), (g ? 'g' : '') + (i ? 'i' : '') + (m ? 'm' : ''));\n  }\n};\n\n/** @see {Type} indices must match */\nexport const writers: Record<Type, WriterFn<any>> = [\n  uintCoder.$write, // Type.UInt\n  uint8Coder.$write, // Type.UInt8\n  uint16Coder.$write, // Type.UInt16\n  uint32Coder.$write, // Type.UInt32\n  intCoder.$write, // Type.Int\n  int8Coder.$write, // Type.Int8\n  int16Coder.$write, // Type.Int16\n  int32Coder.$write, // Type.Int32\n  float64Coder.$write, // Type.Float64\n  float32Coder.$write, // Type.Float32\n  float16Coder.$write, // Type.Float16\n  scalar8Coder.$write, // Type.Scalar\n  uscalar8Coder.$write, // Type.UScalar\n  boolCoder.$write, // Type.Bool\n  boolsCoder.$write, // Type.Bools\n  bufferCoder.$write, // Type.Buffer\n  stringCoder.$write, // Type.String\n  jsonCoder.$write, // Type.JSON\n  regexCoder.$write, // Type.RegExp\n  dateCoder.$write, // Type.Date\n];\n\n/** @see {Type} indices must match */\nexport const readers: Record<Type, ReaderFn<any>> = [\n  uintCoder.$read, // Type.UInt\n  uint8Coder.$read, // Type.UInt8\n  uint16Coder.$read, // Type.UInt16\n  uint32Coder.$read, // Type.UInt32\n  intCoder.$read, // Type.Int\n  int8Coder.$read, // Type.Int8\n  int16Coder.$read, // Type.Int16\n  int32Coder.$read, // Type.Int32\n  float64Coder.$read, // Type.Float64\n  float32Coder.$read, // Type.Float32\n  float16Coder.$read, // Type.Float16\n  scalar8Coder.$read, // Type.Scalar\n  uscalar8Coder.$read, // Type.UScalar\n  boolCoder.$read, // Type.Bool\n  boolsCoder.$read, // Type.Bools\n  bufferCoder.$read, // Type.Buffer\n  stringCoder.$read, // Type.String\n  jsonCoder.$read, // Type.JSON\n  regexCoder.$read, // Type.RegExp\n  dateCoder.$read, // Type.Date\n];\n","/** Default maximum transmission unit in networking */\nconst MTU = 1500;\n\n/** Set Tinybuf global config */\nexport const setTinybufConfig = (c: Partial<TinybufConfig>): void => {\n  cfg = { ...cfg, ...c };\n};\n\nexport type TinybufConfig = {\n  /**\n   * (default: false)\n   *\n   * This sets the default value for `preserveBytes` on\n   * `encode(data, preserveBytes?)`.\n   *\n   * By default, `encode()` returns its encoded bytes as a `Uint8Array`\n   * view of the bytes in the shared encoding buffer.\n   *\n   * This is suitable for synchronous use (e.g. high-performance applications)\n   * as it avoids slow and expensive memory allocation and fragmentation on\n   * each call to `encode()`.\n   *\n   * However, susbsequent calls are destructive to the underlying bytes, so\n   * for asynchronous uses (e.g. Promises, Workers, long-lived storage), set\n   * `preserveBytes` to `true`.\n   */\n  safe: boolean,\n\n  /**\n   * (default: true)\n   * By default, format encoders share a global encoding buffer for performance\n   * and memory management reasons.\n   *\n   * When set to false, each format is allocated an individual encoding buffer.\n   *\n   * Enable to maximise performance and memory re-use, just be cautious of\n   * possible race conditions.\n   */\n  useGlobalEncodingBuffer: boolean,\n\n  /**\n   * (default: 1500)\n   * The maximum bytes that can be allocated to an encoding buffer.\n   *\n   * Default is 1500 bytes, the standard \"Maximum Transmission Unit\".\n   */\n  encodingBufferMaxSize: number,\n\n  /**\n   * (default: 256)\n   * Initial bytes to allocate for an encoding buffer.\n   */\n  encodingBufferInitialSize: number,\n\n  /**\n   * (default: 256)\n   * Additional bytes to allocated when dynamically increasing the size of an encoding buffer.\n   */\n  encodingBufferIncrement: number,\n};\n\n/** @internal */\nexport let cfg: TinybufConfig = {\n  safe: false,\n  useGlobalEncodingBuffer: true,\n  encodingBufferMaxSize: MTU,\n  encodingBufferInitialSize: 256,\n  encodingBufferIncrement: 256,\n};\n","import { cfg } from \"../config\";\nimport { EncodeError } from \"./errors\";\n\n/**\n * Wraps a buffer with a write head pointer.\n *\n * @internal\n */\nexport class BufferWriter {\n  public i: number = 0;\n  private _$dataView: DataView;\n\n  public constructor(value: number | ArrayBuffer) {\n    if (typeof value === 'number') {\n      // internal buffer\n      this._$dataView = new DataView(new ArrayBuffer(value));\n    }\n    else {\n      // external buffer\n      this._$dataView = new DataView(value);\n    }\n  }\n\n  public $viewBytes(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset, this.i);\n  }\n\n  public $copyBytes(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer.slice(0, this.i));\n  }\n\n  // ----- Writers: -----\n\n  public $writeInt8(value: number): void {\n    this._$dataView.setInt8(this._$alloc(1), value);\n  }\n\n  public $writeInt16(value: number): void {\n    this._$dataView.setInt16(this._$alloc(2), value, true);\n  }\n\n  public $writeInt32(value: number): void {\n    this._$dataView.setInt32(this._$alloc(4), value, true);\n  }\n\n  public $writeUint8(value: number): void {\n    this._$dataView.setUint8(this._$alloc(1), value);\n  }\n\n  public $writeUint16(value: number): void {\n    this._$dataView.setUint16(this._$alloc(2), value, false); // big-endian for varint\n  }\n\n  public $writeUint32(value: number): void {\n    this._$dataView.setUint32(this._$alloc(4), value, false); // big-endian for varint\n  }\n\n  public $writeFloat32(value: number): void {\n    this._$dataView.setFloat32(this._$alloc(4), value, true);\n  }\n\n  public $writeFloat64(value: number): void {\n    this._$dataView.setFloat64(this._$alloc(8), value, true);\n  }\n\n  public $writeBuffer(b: Uint8Array | ArrayBuffer | ArrayBufferView): void {\n    // allocate bytes first\n    const offset = this._$alloc(b.byteLength);\n\n    const bBytes = ArrayBuffer.isView(b)\n      ? b instanceof Uint8Array ? b : new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n      : new Uint8Array(b);\n\n    // copy bytes\n    new Uint8Array(this._$dataView.buffer, offset, b.byteLength).set(bBytes);\n  }\n\n  // ----- Private methods: -----\n\n  /** @returns writer head (byteOffset) */\n  private _$alloc(bytes: number): number {\n    if (this.i + bytes > this._$dataView.byteLength) {\n      const minBytesNeeded = this.i + bytes - this._$dataView.byteLength;\n      const requestedNewBytes = Math.ceil(minBytesNeeded / cfg.encodingBufferIncrement) * cfg.encodingBufferIncrement;\n      this._$resizeBuffer(this._$dataView.byteLength + requestedNewBytes);\n    }\n\n    const j = this.i;\n    this.i += bytes;\n\n    return j;\n  }\n\n  private _$resizeBuffer(newLength: number): void {\n    if (newLength > cfg.encodingBufferMaxSize) {\n      // safety check\n      throw new EncodeError(`exceeded max encoding buffer size: ${cfg.encodingBufferMaxSize}`);\n    }\n\n    const newBuffer = new ArrayBuffer(newLength);\n\n    // copy bytes\n    const bytes = new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset, this._$dataView.byteLength);\n    new Uint8Array(newBuffer).set(bytes);\n\n    // update view\n    this._$dataView = new DataView(newBuffer);\n  }\n}\n","/**\n * Wraps a buffer with a read head pointer.\n *\n * @internal\n */\nexport class BufferReader {\n  public i: number;\n  private _$dataView: DataView;\n\n  public constructor(b: Uint8Array | ArrayBufferView | ArrayBuffer, headerBytes?: number) {\n    this._$dataView = ArrayBuffer.isView(b)\n      ? new DataView(b.buffer, b.byteOffset, b.byteLength)\n      : new DataView(b);\n\n    this.i = headerBytes ?? 0; // internal offset (header)\n  }\n\n  /** Read the next byte, without moving the read head pointer. */\n  public $peek(): number {\n    return this._$dataView.getUint8(this.i);\n  }\n\n  /** Skip the next byte without reading it. */\n  public $skip(): void {\n    this.i++;\n  }\n\n  // ----- Readers: -----\n\n  public $readUint8(): number {\n    return this._$dataView.getUint8(this.i++);\n  }\n\n  public $readUint16(): number {\n    const r = this._$dataView.getUint16(this.i); // big-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readUint32(): number {\n    const r = this._$dataView.getUint32(this.i); // big-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readInt8(): number {\n    return this._$dataView.getInt8(this.i++);\n  }\n\n  public $readInt16(): number {\n    const r = this._$dataView.getInt16(this.i, true); // little-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readInt32(): number {\n    const r = this._$dataView.getInt32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat32(): number {\n    const r = this._$dataView.getFloat32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat64(): number {\n    const r = this._$dataView.getFloat64(this.i, true); // little-endian\n    this.i += 8;\n    return r;\n  }\n\n  /** @throws RangeError if exceeds length */\n  public $readBuffer(bytes: number): Uint8Array {\n    if (this.i + bytes > this._$dataView.byteLength) {\n      throw new RangeError();\n    }\n\n    const view = new Uint8Array(this._$dataView.buffer, this.i, bytes);\n    this.i += bytes;\n\n    return view;\n  }\n}\n","/**\n * Field types for defining encoding formats.\n *\n * @see [Get started: Types](https://github.com/reececomo/tinybuf/blob/main/docs/get_started.md#types)\n */\nexport const enum Type {\n  /**\n   * Unsigned integer (1 - 8 bytes).\n   * - 0 → 127 = 1 byte\n   * - 128 → 16,384 = 2 bytes\n   * - 16,385 → 536,870,911 = 4 bytes\n   * - 536,870,912 → `Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  UInt = 0,\n\n  /** Unsigned 8-bit integer (between 0 and 255, 1 byte). */\n  UInt8,\n\n  /** Unsigned 16-bit integer (between 0 and 65,535, 2 bytes). */\n  UInt16,\n\n  /** Unsigned 32-bit integer (between 0 and 4,294,967,295, 4 bytes). */\n  UInt32,\n\n  /**\n   * Signed integer (1 - 8 bytes).\n   * - 0 → ±64 = 1 byte\n   * - ±65 → ±8,192 = 2 bytes\n   * - ±8,193 → ±268,435,456 = 4 bytes\n   * - ±268,435,457 → ±`Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  Int,\n\n  /** Signed 1 byte integer (between -127 and 127). */\n  Int8,\n\n  /** Signed 2 byte integer (between -32,767 and 32,767). */\n  Int16,\n\n  /** Signed 4 byte integer (between -2,147,483,647 and 2,147,483,647). */\n  Int32,\n\n  /** Default JavaScript `number` type. Floating-point number (64-bit, double precision, 8 bytes). */\n  Float64,\n\n  /** Floating-point number (32-bit, single precision, 4 bytes). */\n  Float32,\n\n  /**\n   * Floating-point number (16-bit, half precision, 2 bytes).\n   *\n   * **Warning:** Low precision; maximum range: ±65,504.\n   */\n  Float16,\n\n  /** A cheap, low-resolution signed scalar between -1.00 and 1.00 (1 byte). */\n  Scalar8,\n\n  /** A cheap, low-resolution unsigned scalar between 0.00 and 1.00 (1 byte). */\n  UScalar8,\n\n  /**\n   * Boolean value (1 byte).\n   * @see {Bools} for packing multiple booleans into a single byte.\n   */\n  Bool,\n\n  /** Any array of booleans (1 bit overhead, encoded as UInt). */\n  Bools,\n\n  /** Any ArrayBuffer or ArrayBufferView (e.g. Uint8Array) value (encoded as 1 x UInt for byte length + buffer bytes). */\n  Buffer,\n\n  /** A UTF-8 string (encoded as 1 x UInt for UTF-8 byte length + UTF-8 bytes). */\n  String,\n\n  /** Any JSON-serializable data. Encodes as a UTF-8 string. */\n  JSON,\n\n  /** JavaScript regular expression. */\n  RegExp,\n\n  /**\n   * JavaScript date object.\n   *\n   * Encoded as an 8 byte (64-bit) integer UTC timestamp from as the number\n   * of milliseconds since the Unix Epoch (January 1, 1970, 00:00:00 UTC).\n   *\n   * @see {Date}\n   */\n  Date,\n}\n\n/**\n * Mappings for the value types.\n */\nexport type ValueTypes = {\n  [Type.Int]: number;\n  [Type.Int8]: number;\n  [Type.Int16]: number;\n  [Type.Int32]: number;\n  [Type.UInt]: number;\n  [Type.UInt8]: number;\n  [Type.UInt16]: number;\n  [Type.UInt32]: number;\n  [Type.Float64]: number;\n  [Type.Float32]: number;\n  [Type.Float16]: number;\n  [Type.Scalar8]: number;\n  [Type.UScalar8]: number;\n  [Type.Bool]: boolean;\n  [Type.Bools]: boolean[];\n  [Type.Buffer]: Uint8Array | ArrayBuffer | ArrayBufferView;\n  [Type.String]: string;\n  [Type.JSON]: any;\n  [Type.RegExp]: RegExp;\n  [Type.Date]: Date;\n};\n\n/** @throws any error too */\nexport type ValidationFn<T> = (x: T) => undefined | boolean | Error;\nexport type TransformFn<T> = (x: T) => T;\nexport type Transforms<T> = TransformFn<T> | [preEncode: TransformFn<T>] | [preEncode: TransformFn<T> | undefined, postDecode: TransformFn<T> | undefined];\n\n/**\n * A wrapper around any Type definition that declares it as optional.\n */\nexport class OptionalType<T extends FieldDefinition> {\n  public constructor(public type: T) {}\n}\n\n/**\n * Wrap any definition as optional.\n */\nexport function optional<T extends FieldDefinition>(t: T): OptionalType<T> {\n  return new OptionalType(t);\n}\n\n/**\n * A definition for an object binary encoder.\n */\nexport type EncoderDefinition = {\n  [key: string]: FieldDefinition | OptionalType<FieldDefinition>;\n};\n\n/**\n * Definition for an object-field binary encoder.\n */\nexport type FieldDefinition = keyof ValueTypes | [keyof ValueTypes] | EncoderDefinition | [EncoderDefinition] | OptionalType<FieldDefinition>;\n\n/**\n * The resulting type of the decoded data, based on the encoder definition.\n */\nexport type InferredDecodedType<EncoderType extends EncoderDefinition> = {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends OptionalType<any> ? never : EKey]: EncoderType[EKey] extends keyof ValueTypes\n      ? ValueTypes[EncoderType[EKey]]\n      : EncoderType[EKey] extends [keyof ValueTypes]\n        ? Array<ValueTypes[EncoderType[EKey][0]]>\n        : EncoderType[EKey] extends EncoderDefinition\n          ? InferredDecodedType<EncoderType[EKey]>\n          : EncoderType[EKey] extends [EncoderDefinition]\n            ? Array<InferredDecodedType<EncoderType[EKey][number]>>\n            : never;\n} & {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends OptionalType<any> ? EKey : never]?: EncoderType[EKey] extends OptionalType<infer OptionalValue extends keyof ValueTypes>\n    ? ValueTypes[OptionalValue] | undefined\n    : EncoderType[EKey] extends OptionalType<infer OptionalValue extends [keyof ValueTypes]>\n      ? Array<ValueTypes[OptionalValue[0]]> | undefined\n      : EncoderType[EKey] extends OptionalType<infer OptionalValue extends EncoderDefinition>\n        ? InferredDecodedType<OptionalValue> | undefined\n        : never;\n};\n\nexport type InferredTransformConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? Transforms<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? Transforms<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredTransformConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredTransformConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends OptionalType<infer OptionalValue extends keyof ValueTypes>\n            ? Transforms<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends OptionalType<infer OptionalValue extends [keyof ValueTypes]>\n              ? Transforms<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends OptionalType<infer OptionalValue extends EncoderDefinition>\n                ? InferredTransformConfig<OptionalValue> | undefined\n                : never;\n};\n\nexport type InferredValidationConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? ValidationFn<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? ValidationFn<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredValidationConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredValidationConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends OptionalType<infer OptionalValue extends keyof ValueTypes>\n            ? ValidationFn<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends OptionalType<infer OptionalValue extends [keyof ValueTypes]>\n              ? ValidationFn<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends OptionalType<infer OptionalValue extends EncoderDefinition>\n                ? InferredValidationConfig<OptionalValue> | undefined\n                : never;\n};\n","import { writers, readers } from './lib/coders';\nimport * as coders from './lib/coders';\nimport { $hashCode, $strToHashCode } from './lib/hashCode';\nimport { peekHeader, peekHeaderStr } from './lib/peek';\nimport { BufferWriter } from './lib/BufferWriter';\nimport { BufferReader } from './lib/BufferReader';\nimport {\n  InferredDecodedType,\n  EncoderDefinition,\n  Type,\n  OptionalType,\n  InferredTransformConfig,\n  InferredValidationConfig,\n  ValidationFn,\n  Transforms,\n  FieldDefinition\n} from './Type';\nimport { EncodeError } from './lib/errors';\nimport { cfg } from './config';\n\nexport type FormatHeader = string | number;\n\n/**\n * Decoded object types for a given binary format.\n * @example let onData = (data: Decoded<typeof MyBufferFormat>) => {...};\n */\nexport type Decoded<FromBufferFormat> = FromBufferFormat extends BufferFormat<infer EncoderType, any> ? InferredDecodedType<EncoderType> : never;\n\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(def: T): BufferFormat<T, HeaderType>;\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(h: HeaderType | null, def: T): BufferFormat<T, HeaderType>;\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(a?: HeaderType | T, b?: T): BufferFormat<T, HeaderType> {\n  return a !== null && typeof a === 'object'\n    ? new BufferFormat<T, HeaderType>(a as T)\n    : new BufferFormat<T, HeaderType>(b as T, a as HeaderType);\n}\n\nfunction isValidHeader(h: FormatHeader): boolean {\n  if (typeof h === 'number') return Number.isInteger(h) && h >= 0 && h <= 65_535;\n  if (typeof h === 'string') return new TextEncoder().encode(h).byteLength === 2;\n  return false;\n}\n\n/**\n * BufferFormat is a utility class for encoding and decoding binary data based\n * on a provided encoding format.\n *\n * @see {header}\n * @see {encode(data)}\n * @see {decode(binary)}\n */\nexport class BufferFormat<EncoderType extends EncoderDefinition, HeaderType extends FormatHeader = number> {\n  /** @internal */\n  private static _$globalWriter?: BufferWriter;\n\n  /**\n   * A unique identifier encoded as the first 2 bytes (or `undefined` if headerless).\n   *\n   * @see {peekHeader(...)}\n   * @see {peekHeaderStr(...)}\n   */\n  public readonly header!: HeaderType;\n\n  /** @internal */\n  private readonly _$header!: number; // always uint16 vesion\n  /** @internal */\n  private readonly _$type!: Type;\n  /** @internal */\n  private readonly _$fields!: Field[];\n  /** @internal */\n  private readonly _$fieldsMap!: Map<string, Field>;\n\n  /** @internal */\n  private _$format?: string;\n  /** @internal */\n  private _$transforms?: Transforms<any> | undefined;\n  /** @internal */\n  private _$validate?: ValidationFn<any> | undefined;\n  /** @internal */\n  private _$hasValidationOrTransforms = false;\n  /** @internal */\n  private _$writer?: BufferWriter;\n\n  public constructor(\n    def: EncoderType,\n    header?: HeaderType | null,\n  ) {\n    // set definition\n    if (typeof def === 'number') {\n      this._$type = def;\n    }\n    else if (def instanceof OptionalType) {\n      throw new TypeError(\"Invalid encoding format: Root object cannot be optional.\");\n    }\n    else if (def instanceof Object) {\n      this._$type = undefined; // object\n      this._$fieldsMap = new Map();\n      this._$fields = Object.keys(def).map((name) => {\n        const f = new Field(name, def[name]);\n        this._$fieldsMap.set(name, f);\n        return f;\n      });\n\n      // set headers\n      if (header === undefined) {\n        this.header = $hashCode(this.f) as HeaderType; // automatic\n        this._$header = this.header as number;\n      }\n      else if (header === null) {\n        this.header = undefined; // headerless\n        this._$header = undefined;\n      }\n      else if (isValidHeader(header)) {\n        this.header = header; // manual\n        this._$header = typeof header === 'number' ? header : $strToHashCode(header);\n      }\n      else {\n        throw new TypeError(`Header should be an integer between 0 and 65535, a 2-byte string, or null. Received: ${header}`);\n      }\n    }\n    else {\n      throw new TypeError(\"Invalid encoding format: Must be an object, or a known coder type.\");\n    }\n  }\n\n  // ----- Static methods: -----\n\n  /**\n   * Read the header of a buffer as a number.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeader = peekHeader;\n\n  /**\n   * Read the header of a buffer as a string.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeaderStr = peekHeaderStr;\n\n  // ----- Accessors: -----\n\n  /**\n   * @example \"{uint8,str[]?}\"\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private get f(): string {\n    if (this._$format === undefined) {\n      this._$format = this._$fields !== undefined\n        ? `{${this._$fields.map(v => v.f).join(',')}}`\n        : `${this._$type}`;\n    }\n\n    return this._$format;\n  }\n\n  /** @internal */\n  private static _$initWriter(): BufferWriter {\n    if (cfg.useGlobalEncodingBuffer) {\n      if (!BufferFormat._$globalWriter) {\n        // lazy init: global encoding buffer created at max size\n        this._$globalWriter = new BufferWriter(cfg.encodingBufferInitialSize);\n      }\n\n      return this._$globalWriter;\n    }\n\n    return new BufferWriter(cfg.encodingBufferInitialSize);\n  }\n\n  /**\n   * Encode an object to bytes.\n   *\n   * **Warning:** Returns an unsafe view into the encoding buffer. Pass this reference to preserve\n   * performance, and to minimize memory allocation and fragmentation.\n   *\n   * @param data - data to encode\n   * @param preserveBytes - (default: `setTinybufConfig().safe`) When set to true, copies encoded\n   * bytes to a new buffer. When set to false, returns an unsafe view of bytes but prevents\n   * unnnecessary memory allocation and fragmentation.\n   *\n   * @returns a copy of encoded bytes\n   * @throws if fails to encode value to schema\n   */\n  public encode<DecodedType extends InferredDecodedType<EncoderType>>(\n    data: DecodedType,\n    preserveBytes?: boolean,\n  ): Uint8Array {\n    if (!this._$writer) {\n      // lazy init\n      this._$writer = BufferFormat._$initWriter();\n    }\n\n    // reset\n    this._$writer.i = 0;\n\n    if (this._$hasValidationOrTransforms) {\n      data = this._$preprocess(data);\n    }\n\n    this._$write(data, this._$writer);\n\n    return (preserveBytes ?? cfg.safe)\n      ? this._$writer.$copyBytes()\n      : this._$writer.$viewBytes();\n  }\n\n  /**\n   * Decode binary data to an object.\n   * @throws if fails to decode bytes to schema.\n   */\n  public decode<DecodedType = InferredDecodedType<EncoderType>>(b: Uint8Array | ArrayBufferView | ArrayBuffer): DecodedType {\n    return this._$read(new BufferReader(b, this.header === undefined ? 0 : 2));\n  }\n\n  /**\n   * Set additional transform functions to apply before encoding and after decoding.\n   */\n  public setTransforms(transforms: InferredTransformConfig<EncoderType> | Transforms<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (typeof transforms === 'function' || (Array.isArray(transforms) && typeof transforms[0]  === 'function')) {\n      this._$transforms = transforms;\n    }\n    else {\n      for (const name of Object.keys(transforms)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set transforms for field '${name}'`);\n        }\n\n        // Set validation for object.\n        field.$coder.setTransforms(transforms[name]);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Set additional validation rules which are applied on encode() and decode().\n   *\n   * - Validation functions should throw an error, return an error, or return boolean false.\n   * - Anything else is treated as successfully passing validation.\n   */\n  public setValidation(validations: InferredValidationConfig<EncoderType> | ValidationFn<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (typeof validations === 'function') {\n      this._$validate = validations;\n    }\n    else {\n      for (const name of Object.keys(validations)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set validation function for field '${name}'`);\n        }\n\n        field.$coder.setValidation(validations[name]);\n      }\n    }\n\n    return this;\n  }\n\n  // ----- Implementation: -----\n\n  /**\n   * @param value\n   * @param bw\n   * @throws if the value is invalid\n   *\n   * @internal\n   */\n  private _$write(value: { [x: string]: any; }, bw: BufferWriter): void {\n    // write header\n    if (this._$header !== undefined) this._$writer.$writeUint16(this._$header);\n\n    // write scalar\n    if (this._$type !== undefined) {\n      const safeValue = (this._$validate || this._$transforms) ? this._$preprocess(value) : value;\n\n      return writers[this._$type](safeValue, bw);\n    }\n\n    // check for object type\n    if (!value || typeof value !== 'object') {\n      throw new TypeError(`expected object type`);\n    }\n\n    // write each field\n    for (const field of this._$fields) {\n      const subValue = value[field.$name];\n\n      if (field.$isOptional) {\n\n        // add 'presence' flag\n        if (subValue === undefined || subValue === null) {\n          coders.boolCoder.$write(false, bw);\n          continue;\n        }\n        else {\n          coders.boolCoder.$write(true, bw);\n        }\n      }\n\n      if (!field.$isArray) {\n        // scalar field\n        field.$coder._$write(subValue, bw);\n        continue;\n      }\n\n      // Array field\n      this._$writeArray(subValue, bw, field.$coder);\n    }\n  }\n\n  /**\n   * pre-process: validation and/or transforms\n   * @internal\n   */\n  private _$preprocess<T extends Record<string, any>>(data: T): T {\n    if (this._$validate && this._$validate(data) === false) {\n      throw new Error('failed validation');\n    }\n\n    if (typeof this._$transforms === 'function') {\n      return this._$transforms(data);\n    }\n    else if (Array.isArray(this._$transforms) && typeof this._$transforms[0] === 'function') {\n      return this._$transforms[0](data);\n    }\n\n    return data;\n  }\n\n  /**\n   * post-process: validation and/or transforms\n   * @internal\n   */\n  private _$postprocess<T extends Record<string, any>>(data: T): T {\n    if (Array.isArray(this._$transforms) && typeof this._$transforms[1] === 'function') {\n      data = this._$transforms[1](data);\n    }\n\n    if (this._$validate !== undefined) {\n      this._$validate(data);\n    }\n\n    return data;\n  }\n\n  /**\n   * This function will be executed only the first time\n   * After that, we'll compile the read routine and add it directly to the instance\n   * @param state\n   * @returns\n   * @throws if fails\n   *\n   * @internal\n   */\n  private _$read<DecodedType = InferredDecodedType<EncoderType>>(state: BufferReader): DecodedType {\n    // This function will be executed only the first time to compile the read routine.\n    // After that, we'll compile the read routine and add it directly to the instance\n\n    // Update the read method implementation.\n    this._$read = this._$compileFormatReadFn();\n\n    return this._$read(state);\n  }\n\n  /**\n   * Generate read function code for this coder.\n   *\n   * @example\n   * // new Type({a:'int', 'b?':['string']}) would emit:\n   *\n   * `return {\n   *   a: this._readField(0, state),\n   *   b: this._readField(1, state),\n   * }`\n   *\n   * @internal\n   */\n  private _$makeObjectReader(): string {\n    const fieldsStr: string = this._$fields\n      .map(({ $name: name }, i) => `${name}:this.${this._$readField.name}(${i},state)`)\n      .join(',');\n\n    return `return{${fieldsStr}}`;\n  }\n\n  /**\n   * Read an individual field.\n   * @internal\n   */\n  private _$readField(fieldId: number, state: BufferReader): any {\n    const field = this._$fields[fieldId];\n\n    if (field.$isOptional && !this._$readOptional(state)) {\n      return undefined;\n    }\n\n    if (field.$isArray) {\n      return this._$readArray(field.$coder, state);\n    }\n\n    return field.$coder._$read(state);\n  }\n\n  /**\n   * Compile the decode() method for this object.\n   *\n   * @internal\n   */\n  private _$compileFormatReadFn<DecodedType = InferredDecodedType<EncoderType>>(): (state: BufferReader) => DecodedType {\n    if (this._$type !== undefined) {\n      // object type\n      return this._$hasValidationOrTransforms\n        ? (s) => this._$postprocess(readers[this._$type](s))\n        : readers[this._$type];\n    }\n\n    // scalar type\n    return new Function('state', this._$makeObjectReader()) as any;\n  }\n\n  /**\n   * @internal\n   */\n  private _$writeArray(value: string | any[], data: any, type: BufferFormat<any, any>): void {\n    if (!Array.isArray(value)) {\n      throw new EncodeError(`Array<${type._$type}>`, data);\n    }\n\n    coders.uintCoder.$write(value.length, data);\n    for (let i = 0; i < value.length; i++) {\n      type._$write(value[i], data);\n    }\n  }\n\n  /**\n   * @throws if invalid data\n   * @internal\n   */\n  private _$readArray<T extends EncoderDefinition>(type: BufferFormat<T, any>, state: any): Array<T> {\n    const arr = new Array(/* length: */ coders.uintCoder.$read(state));\n    for (let j = 0; j < arr.length; j++) {\n      arr[j] = type._$read(state);\n    }\n    return arr;\n  }\n\n  /** @internal */\n  private _$readOptional(state: BufferReader): boolean {\n    return coders.boolCoder.$read(state);\n  }\n}\n\n/**\n * Parses and represents an object field.\n *\n * @internal\n */\nclass Field {\n  public readonly $name: string;\n  public readonly $coder: BufferFormat<any>;\n  public readonly $isOptional: boolean;\n  public readonly $isArray: boolean;\n\n  private _$formatString?: string;\n\n  public constructor(name: string, rawType: FieldDefinition) {\n    this.$isOptional = rawType instanceof OptionalType;\n    let type = rawType instanceof OptionalType ? rawType.type : rawType;\n    this.$name = name;\n\n    if (Array.isArray(type)) {\n      if (type.length !== 1) {\n        throw new TypeError('Invalid array definition, it must have exactly one element');\n      }\n\n      type = type[0];\n      this.$isArray = true;\n    }\n    else {\n      this.$isArray = false;\n    }\n\n    this.$coder = new BufferFormat<any>(type, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public get f(): string {\n    if (this._$formatString === undefined) {\n      this._$formatString = `${(this.$coder as any).f}${this.$isArray ? '[]' : ''}${this.$isOptional ? '?' : ''}`;\n    }\n\n    return this._$formatString;\n  }\n}\n"],"names":["TinybufError","Error","EncodeError","constructor","a","b","super","DecodeError","summary","cause","message","this","stack","$hashCode","str","hash","i","length","charCodeAt","$strToHashCode","$hashCodeToStr","hashCode","String","fromCharCode","Math","floor","peekHeader","ArrayBuffer","isView","DataView","buffer","byteOffset","getUint16","peekHeaderStr","BufferParser","_$formats","Map","processBuffer","f","data","cb","header","has","get","decode","e","on","format","callback","overwritePrevious","set","ignore","forEach","clear","$floor","$ceil","ceil","$clamp","value","min","max","$roundTowardZero","x","$roundAwayFromZero","$touscal8","$toscal8","$fromuscal8","$fromscal8","mask","slice","reduce","n","unmask","len","clz32","result","Array","encoder","TextEncoder","decoder","TextDecoder","$tof16","Float32Array","y","Int32Array","s","z","$fromf16","pow","d","m","Infinity","NaN","MAX_VARINT32","POW_32","uintCoder","$write","writer","$writeUint8","$writeUint16","$writeUint32","$read","reader","firstByte","$peek","$readUint32","$readUint16","$skip","uint8Coder","$readUint8","uint16Coder","uint32Coder","intCoder","intValue","int8Coder","$writeInt8","$readInt8","int16Coder","$writeInt16","$readInt16","int32Coder","$writeInt32","$readInt32","float16Coder","float32Coder","$writeFloat32","$readFloat32","float64Coder","$writeFloat64","$readFloat64","uscalar8Coder","scalar8Coder","dateCoder","getTime","Date","stringCoder","bufferCoder","encode","$utf8decode","byteLength","$writeBuffer","$readBuffer","boolCoder","boolsCoder","jsonCoder","JSON","stringify","parse","regexCoder","global","ignoreCase","multiline","source","g","RegExp","writers","readers","cfg","safe","useGlobalEncodingBuffer","encodingBufferMaxSize","encodingBufferInitialSize","encodingBufferIncrement","BufferWriter","_$dataView","$viewBytes","Uint8Array","$copyBytes","setInt8","_$alloc","setInt16","setInt32","setUint8","setUint16","setUint32","setFloat32","setFloat64","offset","bBytes","bytes","minBytesNeeded","requestedNewBytes","_$resizeBuffer","j","newLength","newBuffer","BufferReader","headerBytes","getUint8","r","getUint32","getInt8","getInt16","getInt32","getFloat32","getFloat64","RangeError","view","OptionalType","type","BufferFormat","def","_$hasValidationOrTransforms","_$type","TypeError","Object","undefined","_$fieldsMap","_$fields","keys","map","name","Field","_$header","isValidHeader","h","Number","isInteger","_$format","v","join","_$initWriter","_$globalWriter","preserveBytes","_$writer","_$preprocess","_$write","_$read","setTransforms","transforms","isArray","_$transforms","field","$coder","setValidation","validations","_$validate","bw","safeValue","subValue","$name","$isOptional","coders.boolCoder","$isArray","_$writeArray","_$postprocess","state","_$compileFormatReadFn","_$makeObjectReader","_$readField","fieldId","_$readOptional","_$readArray","Function","coders.uintCoder","arr","rawType","_$formatString","defineFormat","f16round","optional","t","scalround","c","assign","uscalround"],"mappings":"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"}