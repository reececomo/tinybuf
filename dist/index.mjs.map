{"version":3,"file":"index.mjs","sources":["../src/core/lib/errors.ts","../src/core/lib/hashCode.ts","../src/core/lib/peek.ts","../src/core/BufferParser.ts","../src/core/lib/math.ts","../src/core/lib/scalar.ts","../src/core/Type.ts","../src/core/lib/bitmask.ts","../src/core/lib/utf8.ts","../src/core/lib/float16.ts","../src/core/lib/coders.ts","../src/core/config.ts","../src/core/lib/BufferWriter.ts","../src/core/lib/BufferReader.ts","../src/core/BufferFormat.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unified-signatures */\n\nexport class TinybufError extends Error {}\n","/**\n * DJB2 hash algorithm (modified for 16-bit uints).\n *\n * DJB2 is a simple and widely used non-cryptographic\n * hash function created by Daniel J. Bernstein.\n *\n * @returns 16-bit unsigned integer\n */\nexport function $hashCode(str: string): number {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return hash & 0xFFFF; // Ensure the result is a Uint16\n}\n\n/**\n * Returns an unsigned 16-bit integer hashcode for some string.\n * Prefers 2 character string.\n *\n * @returns A UInt16 between 0 and 65535 (inclusive).\n */\nexport function $strToHashCode(str: string): number {\n  if (str.length !== 2) return $hashCode(str);\n  return str.charCodeAt(0) * 256 + str.charCodeAt(1);\n}\n\n/**\n * Convert a UInt16 hashcode to a 2-byte string.\n */\nexport function $hashCodeToStr(hashCode: number): string {\n  return String.fromCharCode(Math.floor(hashCode / 256)) + String.fromCharCode(hashCode % 256);\n}\n","import { $hashCodeToStr } from \"./hashCode\";\n\n\n/**\n * Read the header bytes of a buffer as a number.\n *\n * @throws {RangeError} if buffer size < 2\n */\nexport function peekHeader(b: ArrayBuffer | ArrayBufferView): number {\n  return (ArrayBuffer.isView(b) ? new DataView(b.buffer, b.byteOffset, 2) : new DataView(b, 0, 2)).getUint16(0, false);\n}\n\n/**\n * Read the header bytes of a buffer as a string.\n *\n * @throws {RangeError} if buffer length < 2\n */\nexport function peekHeaderStr(b: ArrayBuffer | ArrayBufferView): string {\n  return $hashCodeToStr(peekHeader(b));\n}\n","import { BufferFormat } from \"./BufferFormat\";\nimport { EncoderDefinition, InferredDecodedType } from \"./Type\";\nimport { TinybufError } from \"./lib/errors\";\nimport { $hashCodeToStr, $strToHashCode } from \"./lib/hashCode\";\nimport { peekHeader } from \"./lib/peek\";\n\ntype AnyFormat = BufferFormat<any, any>;\ntype Uint16FormatHeader = number;\n\n/**\n * Small utility for registering and processing format handlers.\n *\n * @example\n * const myHandler = bufferParser()\n *   .on(FormatA, aData => {})\n *   .on(FormatB, bData => {});\n *\n * myHandler.processBuffer(bytes);\n */\nexport const bufferParser = (): BufferParser => new BufferParser();\n\nexport class BufferParser {\n  /** @internal */\n  private _$formats = new Map<Uint16FormatHeader, [AnyFormat, (data: any) => any]>();\n\n  /**\n   * Decode an array buffer and trigger the relevant data handler.\n   *\n   * When passed an ArrayBufferView, accesses the underlying 'buffer' instance directly.\n   *\n   * @throws {TinybufError} if fails to decode, or no handler is registered\n   */\n  public processBuffer(b: ArrayBuffer | ArrayBufferView): void {\n    let f: any, data: any, cb: (data: any) => any;\n\n    try {\n      const header = peekHeader(b);\n\n      if (!this._$formats.has(header)) {\n        throw new TinybufError(`Unknown format: ${header} '${$hashCodeToStr(header)}')`);\n      }\n\n      [f, cb] = this._$formats.get(header);\n      data = f.decode(b);\n    }\n    catch (e) {\n      const err = new TinybufError(`Failed to decode: ${e}`);\n      err.stack = e.stack;\n\n      throw err;\n    }\n\n    cb(data);\n  }\n\n  /**\n   * Register a format handler.\n   */\n  public on<EncoderType extends EncoderDefinition, DecodedType = InferredDecodedType<EncoderType>>(\n    format: BufferFormat<EncoderType, string | number>,\n    callback: (data: DecodedType) => any,\n    overwritePrevious: boolean = false,\n  ): this {\n    if (format.header == null) {\n      throw new TinybufError('Format requires header');\n    }\n\n    const header = typeof format.header === 'string' ? $strToHashCode(format.header) : format.header;\n\n    if (this._$formats.has(header) && !overwritePrevious) {\n      throw new TinybufError(`Format header collision: ${format.header}`);\n    }\n\n    this._$formats.set(header, [format, callback]);\n\n    return this;\n  }\n\n  /** Register a format (or formats) that are recognized. */\n  public ignore(...format: AnyFormat[]): this {\n    format.forEach(f => this.on(f, () => {}, true));\n    return this;\n  }\n\n  /** Clears all registered formats and handlers. */\n  public clear(): void {\n    this._$formats.clear();\n  }\n}\n","export const $floor = Math.floor,\n  $ceil = Math.ceil;\n\n/** Clamp a number to a range. */\nexport const $clamp = (value: number, min: number, max: number): number =>\n  value > max ? max : value < min ? min : value;\n\n/** Round toward zero */\nexport const $roundTowardZero = (x: number): number => x < 0 ? $ceil(x) : $floor(x);\n\n/** Round away zero */\nexport const $roundAwayFromZero = (x: number): number =>\n  x < 0 ? $floor(x) : $ceil(x);\n","import { $clamp, $roundTowardZero, $roundAwayFromZero } from \"./math\";\n\n/**\n * Quantize a number to an 8-bit scalar between 0.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function uscalround(x: number): number {\n  return $fromuscal8($touscal8(x));\n}\n\n/**\n * Quantize a number to an 8-bit signed scalar between -1.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function scalround(x: number): number {\n  return $fromscal8($toscal8(x));\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $touscal8(x: number): number {\n  return $clamp(127 + $roundTowardZero(x * 254 - 127), 0, 254);\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $toscal8(x: number): number {\n  return $clamp($roundTowardZero(x * 127), -127, 127) + 127;\n}\n\n/** @returns An unsigned scalar between 0.0 and 1.0. */\nexport function $fromuscal8(x: number): number {\n  // Make symmetric: (0.5 + round((uint8 - 127) / 254 * 100)) / 100\n  return $clamp(($roundAwayFromZero((x - 127) * 0.3937007874015748) + 50) * 0.01, 0, 1);\n}\n\n/** @returns A signed scalar between -1.0 and 1.0. */\nexport function $fromscal8(x: number): number {\n  // Make symmetric: round((uint8 - 127) / 127 * 100) / 100\n  return $clamp($roundAwayFromZero((x - 127) * 0.787401574803149) * 0.01, -1, 1);\n}\n","/**\n * Field types for defining encoding formats.\n *\n * @see [Get started: Types](https://github.com/reececomo/tinybuf/blob/main/docs/get_started.md#types)\n */\nexport enum Type {\n  /**\n   * Unsigned integer (1 - 8 bytes).\n   * - 0 → 127 = 1 byte\n   * - 128 → 16,384 = 2 bytes\n   * - 16,385 → 536,870,911 = 4 bytes\n   * - 536,870,912 → `Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  UInt = 'u',\n\n  /** Unsigned 8-bit integer (between 0 and 255, 1 byte). */\n  UInt8 = 'u8',\n\n  /** Unsigned 16-bit integer (between 0 and 65,535, 2 bytes). */\n  UInt16 = 'u16',\n\n  /** Unsigned 32-bit integer (between 0 and 4,294,967,295, 4 bytes). */\n  UInt32 = 'u32',\n\n  /**\n   * Signed integer (1 - 8 bytes).\n   * - 0 → ±64 = 1 byte\n   * - ±65 → ±8,192 = 2 bytes\n   * - ±8,193 → ±268,435,456 = 4 bytes\n   * - ±268,435,457 → ±`Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  Int = 'i',\n\n  /** Signed 1 byte integer (between -127 and 127). */\n  Int8 = 'i8',\n\n  /** Signed 2 byte integer (between -32,767 and 32,767). */\n  Int16 = 'i16',\n\n  /** Signed 4 byte integer (between -2,147,483,647 and 2,147,483,647). */\n  Int32 = 'i32',\n\n  /** Default JavaScript `number` type. Floating-point number (64-bit, double precision, 8 bytes). */\n  Float64 = 'f64',\n\n  /** Floating-point number (32-bit, single precision, 4 bytes). */\n  Float32 = 'f32',\n\n  /**\n   * Floating-point number (16-bit, half precision, 2 bytes).\n   *\n   * **Warning:** Low precision; maximum range: ±65,504.\n   */\n  Float16 = 'f16',\n\n  /** A cheap, low-resolution signed scalar between -1.00 and 1.00 (1 byte). */\n  Scalar8 = 's8',\n\n  /** A cheap, low-resolution unsigned scalar between 0.00 and 1.00 (1 byte). */\n  UScalar8 = 'us8',\n\n  /**\n   * Boolean value (1 byte).\n   * @see {Bools} for packing multiple booleans into a single byte.\n   */\n  Bool = 'bl',\n\n  /** Any array of booleans (1 bit overhead, encoded as UInt). */\n  Bools = 'bls',\n\n  /** Any ArrayBuffer or ArrayBufferView (e.g. Uint8Array) value (encoded as 1 x UInt for byte length + buffer bytes). */\n  Buffer = 'buf',\n\n  /** A UTF-8 string (encoded as 1 x UInt for UTF-8 byte length + UTF-8 bytes). */\n  String = 'str',\n\n  /** Any JSON-serializable data. Encodes as a UTF-8 string. */\n  JSON = 'jsn',\n\n  /** JavaScript regular expression. */\n  RegExp = 'reg',\n\n  /**\n   * JavaScript date object.\n   *\n   * Encoded as an 8 byte (64-bit) integer UTC timestamp from as the number\n   * of milliseconds since the Unix Epoch (January 1, 1970, 00:00:00 UTC).\n   *\n   * @see {Date}\n   */\n  Date = 'dt',\n}\n\n/**\n * Mappings for the value types.\n */\nexport type ValueTypes = {\n  [Type.Int]: number;\n  [Type.Int8]: number;\n  [Type.Int16]: number;\n  [Type.Int32]: number;\n  [Type.UInt]: number;\n  [Type.UInt8]: number;\n  [Type.UInt16]: number;\n  [Type.UInt32]: number;\n  [Type.Float64]: number;\n  [Type.Float32]: number;\n  [Type.Float16]: number;\n  [Type.Scalar8]: number;\n  [Type.UScalar8]: number;\n  [Type.Bool]: boolean;\n  [Type.Bools]: boolean[];\n  [Type.Buffer]: Uint8Array | ArrayBuffer | ArrayBufferView;\n  [Type.String]: string;\n  [Type.JSON]: any;\n  [Type.RegExp]: RegExp;\n  [Type.Date]: Date;\n};\n\n/** @throws any error too */\nexport type ValidationFn<T> = (x: T) => undefined | boolean | Error;\nexport type TransformFn<T> = (x: T) => T;\nexport type Transforms<T> = TransformFn<T> | [preEncode: TransformFn<T>] | [preEncode: TransformFn<T> | undefined, postDecode: TransformFn<T> | undefined];\n\n/**\n * A wrapper around any Type definition that declares it as optional.\n */\nexport class MaybeType<T extends FieldDefinition> {\n  public constructor(public type: T) {}\n}\n\n/**\n * Wrap any definition as optional.\n */\nexport function optional<T extends FieldDefinition>(t: T): MaybeType<T> {\n  return new MaybeType(t);\n}\n\n/**\n * A definition for an object binary encoder.\n */\nexport type EncoderDefinition = {\n  [key: string]: FieldDefinition | MaybeType<FieldDefinition>;\n};\n\n/**\n * Definition for an object-field binary encoder.\n */\nexport type FieldDefinition = keyof ValueTypes | [keyof ValueTypes] | EncoderDefinition | [EncoderDefinition] | MaybeType<FieldDefinition>;\n\n/**\n * The resulting type of the decoded data, based on the encoder definition.\n */\nexport type InferredDecodedType<EncoderType extends EncoderDefinition> = {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends MaybeType<any> ? never : EKey]: EncoderType[EKey] extends keyof ValueTypes\n      ? ValueTypes[EncoderType[EKey]]\n      : EncoderType[EKey] extends [keyof ValueTypes]\n        ? Array<ValueTypes[EncoderType[EKey][0]]>\n        : EncoderType[EKey] extends EncoderDefinition\n          ? InferredDecodedType<EncoderType[EKey]>\n          : EncoderType[EKey] extends [EncoderDefinition]\n            ? Array<InferredDecodedType<EncoderType[EKey][number]>>\n            : never;\n} & {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends MaybeType<any> ? EKey : never]?: EncoderType[EKey] extends MaybeType<infer OptionalValue extends keyof ValueTypes>\n    ? ValueTypes[OptionalValue] | undefined\n    : EncoderType[EKey] extends MaybeType<infer OptionalValue extends [keyof ValueTypes]>\n      ? Array<ValueTypes[OptionalValue[0]]> | undefined\n      : EncoderType[EKey] extends MaybeType<infer OptionalValue extends EncoderDefinition>\n        ? InferredDecodedType<OptionalValue> | undefined\n        : never;\n};\n\nexport type InferredTransformConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? Transforms<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? Transforms<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredTransformConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredTransformConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends MaybeType<infer OptionalValue extends keyof ValueTypes>\n            ? Transforms<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends MaybeType<infer OptionalValue extends [keyof ValueTypes]>\n              ? Transforms<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends MaybeType<infer OptionalValue extends EncoderDefinition>\n                ? InferredTransformConfig<OptionalValue> | undefined\n                : never;\n};\n\nexport type InferredValidationConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? ValidationFn<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? ValidationFn<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredValidationConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredValidationConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends MaybeType<infer OptionalValue extends keyof ValueTypes>\n            ? ValidationFn<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends MaybeType<infer OptionalValue extends [keyof ValueTypes]>\n              ? ValidationFn<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends MaybeType<infer OptionalValue extends EncoderDefinition>\n                ? InferredValidationConfig<OptionalValue> | undefined\n                : never;\n};\n","/**\n * Mask booleans to a uint32.\n *\n * @param x - A boolean array.\n * @param padBit - A bit to pad the mask (for variable length data).\n */\nexport const mask = (x: boolean[], padBit: 0 | 1 = 0b1): number => {\n  return x.reduce((n, b: any) => (n << 1) | b, padBit);\n};\n\n/**\n * Unmask booleans from a uint32.\n *\n * @param x - A uint32 number.\n * @param len - number of booleans to expect (default: infer lenth from x where x is encoded with a pad bit)\n */\nexport const unmask = (x: number, len = 31 - Math.clz32(x)): boolean[] => {\n  const result = new Array<boolean>(len);\n  for (let i = 0; i < len; i++) result[i] = !!(x & (1 << (len - 1 - i)));\n  return result;\n};\n","export const $utf8encode = (function () {\n  const encoder = new TextEncoder();\n  return (x?: string): Uint8Array => encoder.encode(x);\n})();\n\nexport const $utf8decode = (function () {\n  const decoder = new TextDecoder('utf-8');\n\n  return (y: Uint8Array): string => decoder.decode(y);\n})();\n","/**\n * Returns the nearest half precision float representation of a number.\n * @param x A numeric expression.\n */\nexport function f16round(x: number): number {\n  return $fromf16($tof16(x));\n}\n\n/**\n * Returns the nearest half precision float representation of a number as a 16-bit bitmask.\n */\nexport const $tof16 = (function() {\n  const x = new Float32Array(1);\n  const y = new Int32Array(x.buffer);\n\n  return function (f: number) {\n    x[0] = f;\n    let i = y[0]; // 32-bit int\n    let s = (i >> 16) & 0X8000; // sign\n    let z = (i & 0X7FFFFFFF) + 0X1000 | 0;\n\n    if (z >= 0X47800000) {\n      if ((i & 0X7FFFFFFF) < 0X47800000) return s | 0X7BFF;\n      if (z < 0X7F800000) return s | 0X7C00;\n      return s | 0X7C00 | (i & 0X007FFFFF) >> 13;\n    }\n    if (z >= 0X38800000) return s | z - 0X38000000 >> 13;\n    else if (z < 0X33000000) return s;\n    z = (i & 0X7FFFFFFF) >> 23;\n    return s | ((i & 0X7FFFFF | 0X800000)\n      + (0X800000 >>> z - 102)\n      >> 126 - z);\n  };\n}());\n\n/**\n * Returns the nearest half precision float value for a 16-bit bitmask.\n */\nexport const $fromf16 = (function() {\n  const z = Math.pow(2, -24); // subnormal constant\n  const d = new Float32Array(32 + 1024);\n  for (let e = 0; e < 32; e++) d[e] = Math.pow(2, e - 15); // biased exponents\n  for (let m = 0; m < 1024; m++) d[m + 0x20] = 1 + m / 1024; // normalized offset mantissas\n\n  return function (b: number): number {\n    const s = (b & 32768) === 32768 ? -1 : 1; // sign: 1 bit\n    const e = b & 31744; // exponent: 5 bits\n    const m = b & 1023; // mantissa: 10 bits\n\n    if (e === 0) return m === 0 ? s * 0 : s * z;\n    if (e === 31744) return m === 0 ? s * Infinity : NaN;\n    return d[e >> 10] * d[m + 0x20] * s;\n  };\n}());\n","import { BufferWriter } from './BufferWriter';\nimport { BufferReader } from './BufferReader';\nimport {\n  $fromuscal8,\n  $fromscal8,\n  $touscal8,\n  $toscal8\n} from './scalar';\nimport { Type } from '../Type';\nimport { mask, unmask } from './bitmask';\nimport { $utf8decode, $utf8encode } from './utf8';\nimport { $floor } from './math';\nimport { $fromf16, $tof16 } from './float16';\n\n// Pre-calculated constants\nconst MAX_VARUINT8 = 128,\n  MAX_VARUINT16 = 16_384,\n  MAX_VARUINT32 = 536_870_912,\n  MAX_VARINT8 = 64,\n  MAX_VARINT16 = 8_192,\n  MAX_VARINT32 = 268_435_456,\n  POW_32 = 0x100000000;\n\ntype WriterFn<T> = (value: T, writer: BufferWriter) => void;\ntype ReaderFn<T> = (reader: BufferReader) => T;\n\nexport interface BinaryTypeCoder<T, R = T> {\n  $write: WriterFn<T>;\n  $read: ReaderFn<R>;\n}\n\n/**\n * Format (big-endian):\n * 7b   0xxx xxxx\n * 14b  10xx xxxx  xxxx xxxx\n * 29b  110x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n * 61b  111x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n */\nexport const uintCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (value < MAX_VARUINT8) {\n      writer.$writeUint8(value);\n    }\n    else if (value < MAX_VARUINT16) {\n      writer.$writeUint16(value + 0x8000);\n    }\n    else if (value < MAX_VARUINT32) {\n      writer.$writeUint32(value + 0xc0000000);\n    }\n    else {\n      writer.$writeUint32($floor(value / POW_32) + 0xe0000000);\n      writer.$writeUint32(value >>> 0);\n    }\n  },\n  $read: (reader) => {\n    const firstByte = reader.$peek();\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      return reader.$readUint16() - 0x8000;\n    }\n    else if (!(firstByte & 0x20)) {\n      return reader.$readUint32() - 0xc0000000;\n    }\n\n    return (reader.$readUint32() - 0xe0000000) * POW_32\n      + reader.$readUint32();\n  }\n};\n\nexport const uint8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8(value),\n  $read: (reader) => reader.$readUint8(),\n};\n\nexport const uint16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint16(value),\n  $read: (reader) => reader.$readUint16(),\n};\n\nexport const uint32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint32(value),\n  $read: (reader) => reader.$readUint32(),\n};\n\n/**\n * Format (big-endian):\n * 7b   0xxx xxxx\n * 14b  10xx xxxx  xxxx xxxx\n * 29b  110x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n * 61b  111x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n */\nexport const intCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (value >= -MAX_VARINT8 && value < MAX_VARINT8) {\n      writer.$writeUint8(value & 0x7f);\n    }\n    else if (value >= -MAX_VARINT16 && value < MAX_VARINT16) {\n      writer.$writeUint16((value & 0x3fff) + 0x8000);\n    }\n    else if (value >= -MAX_VARINT32 && value < MAX_VARINT32) {\n      writer.$writeUint32((value & 0x1fffffff) + 0xc0000000);\n    }\n    else {\n      const intValue = value;\n      // Split in two 32b uints\n      writer.$writeUint32(($floor(intValue / POW_32) & 0x1fffffff) + 0xe0000000);\n      writer.$writeUint32(intValue >>> 0);\n    }\n  },\n  $read: (reader) => {\n    let firstByte = reader.$peek(), i: number;\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return (firstByte & 0x40) ? (firstByte | 0xffffff80) : firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      i = reader.$readUint16() - 0x8000;\n      return (i & 0x2000) ? (i | 0xffffc000) : i;\n    }\n    else if (!(firstByte & 0x20)) {\n      i = reader.$readUint32() - 0xc0000000;\n      return (i & 0x10000000) ? (i | 0xe0000000) : i;\n    }\n    else {\n      i = reader.$readUint32() - 0xe0000000;\n      i = (i & 0x10000000) ? (i | 0xe0000000) : i;\n      return i * POW_32 + reader.$readUint32();\n    }\n  }\n};\n\nexport const int8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt8(value),\n  $read: (reader) => reader.$readInt8(),\n};\n\nexport const int16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt16(value),\n  $read: (reader) => reader.$readInt16(),\n};\n\nexport const int32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt32(value),\n  $read: (reader) => reader.$readInt32(),\n};\n\nexport const float16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint16($tof16(value)),\n  $read: (reader) => $fromf16(reader.$readUint16()),\n};\n\nexport const float32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat32(value),\n  $read: (reader) => reader.$readFloat32(),\n};\n\nexport const float64Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat64(value),\n  $read: (reader) => reader.$readFloat64(),\n};\n\nexport const uscalar8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8($touscal8(value)),\n  $read: (reader) => $fromuscal8(reader.$readUint8()),\n};\n\nexport const scalar8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8($toscal8(value)),\n  $read: (reader) => $fromscal8(reader.$readUint8()),\n};\n\nexport const dateCoder: BinaryTypeCoder<Date> = {\n  $write: (value, writer) => intCoder.$write(value.getTime(), writer),\n  $read: (reader) => new Date(intCoder.$read(reader)),\n};\n\nexport const stringCoder: BinaryTypeCoder<string> = {\n  $write: (value, writer) => {\n    const bytes = $utf8encode(value ?? '');\n    bufferCoder.$write(bytes, writer);\n  },\n  $read: (reader) => {\n    const bytes = bufferCoder.$read(reader);\n    return $utf8decode(bytes);\n  },\n};\n\nexport const bufferCoder: BinaryTypeCoder<ArrayBuffer | ArrayBufferView, Uint8Array> = {\n  $write: (value, writer) => {\n    if (value.byteLength == null) throw new Error(`not a buffer (reason 2:  ${value} ${value.constructor})`);\n    if (!(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value)) throw new Error(`not a buffer (reason 1) ${value} ${(value as any).constructor}`);\n    uintCoder.$write(value.byteLength, writer); // header byte (length)\n    writer.$writeBytes(value);\n  },\n  $read: (reader) => {\n    const bytes = uintCoder.$read(reader);\n    return reader.$readBytes(bytes);\n  },\n};\n\nexport const boolCoder: BinaryTypeCoder<boolean> = {\n  $write: (value, writer) => writer.$writeUint8(value ? 1 : 0),\n  $read: (reader) => reader.$readUint8() !== 0,\n};\n\nexport const boolsCoder: BinaryTypeCoder<boolean[]> = {\n  $write: (value, writer) => {\n    if (value.length > 28) value = value.slice(0, 28); // stored as UInt\n    uintCoder.$write(mask(value), writer);\n  },\n  $read: (reader) => unmask(uintCoder.$read(reader)),\n};\n\nexport const jsonCoder: BinaryTypeCoder<any> = {\n  $write: (value, writer) => stringCoder.$write(JSON.stringify(value), writer),\n  $read: (reader) => JSON.parse(stringCoder.$read(reader)),\n};\n\nexport const regexCoder: BinaryTypeCoder<RegExp> = {\n  $write: (value, writer) => {\n    writer.$writeUint8(mask([value.global, value.ignoreCase, value.multiline]));\n    stringCoder.$write(value.source, writer);\n  },\n  $read: (reader) => {\n    const [g, i, m] = unmask(reader.$readUint8());\n    return new RegExp(stringCoder.$read(reader), (g ? 'g' : '') + (i ? 'i' : '') + (m ? 'm' : ''));\n  }\n};\n\n/** @see {Type} indices must match */\nexport const writers: Record<Type, WriterFn<any>> = {\n  [Type.UInt]: uintCoder.$write,\n  [Type.UInt8]: uint8Coder.$write,\n  [Type.UInt16]: uint16Coder.$write,\n  [Type.UInt32]: uint32Coder.$write,\n  [Type.Int]: intCoder.$write,\n  [Type.Int8]: int8Coder.$write,\n  [Type.Int16]: int16Coder.$write,\n  [Type.Int32]: int32Coder.$write,\n  [Type.Float64]: float64Coder.$write,\n  [Type.Float32]: float32Coder.$write,\n  [Type.Float16]: float16Coder.$write,\n  [Type.Scalar8]: scalar8Coder.$write,\n  [Type.UScalar8]: uscalar8Coder.$write,\n  [Type.Bool]: boolCoder.$write,\n  [Type.Bools]: boolsCoder.$write,\n  [Type.Buffer]: bufferCoder.$write,\n  [Type.String]: stringCoder.$write,\n  [Type.JSON]: jsonCoder.$write,\n  [Type.RegExp]: regexCoder.$write,\n  [Type.Date]: dateCoder.$write,\n};\n\n/** @see {Type} indices must match */\nexport const readers: Record<Type, ReaderFn<any>> = {\n  [Type.UInt]: uintCoder.$read,\n  [Type.UInt8]: uint8Coder.$read,\n  [Type.UInt16]: uint16Coder.$read,\n  [Type.UInt32]: uint32Coder.$read,\n  [Type.Int]: intCoder.$read,\n  [Type.Int8]: int8Coder.$read,\n  [Type.Int16]: int16Coder.$read,\n  [Type.Int32]: int32Coder.$read,\n  [Type.Float64]: float64Coder.$read,\n  [Type.Float32]: float32Coder.$read,\n  [Type.Float16]: float16Coder.$read,\n  [Type.Scalar8]: scalar8Coder.$read,\n  [Type.UScalar8]: uscalar8Coder.$read,\n  [Type.Bool]: boolCoder.$read,\n  [Type.Bools]: boolsCoder.$read,\n  [Type.Buffer]: bufferCoder.$read,\n  [Type.String]: stringCoder.$read,\n  [Type.JSON]: jsonCoder.$read,\n  [Type.RegExp]: regexCoder.$read,\n  [Type.Date]: dateCoder.$read,\n};\n","/** Default maximum transmission unit in networking */\nconst MTU = 1500;\n\n/** Set Tinybuf global config */\nexport const setTinybufConfig = (c: Partial<TinybufConfig>): void => {\n  cfg = { ...cfg, ...c };\n};\n\nexport type TinybufConfig = {\n  /**\n   * (default: false)\n   *\n   * This sets the default value for `preserveBytes` on\n   * `encode(data, preserveBytes?)`.\n   *\n   * By default, `encode()` returns its encoded bytes as a `Uint8Array`\n   * view of the bytes in the shared encoding buffer.\n   *\n   * This is suitable for synchronous use (e.g. high-performance applications)\n   * as it avoids slow and expensive memory allocation and fragmentation on\n   * each call to `encode()`.\n   *\n   * However, susbsequent calls are destructive to the underlying bytes, so\n   * for asynchronous uses (e.g. Promises, Workers, long-lived storage), set\n   * `preserveBytes` to `true`.\n   */\n  safe: boolean,\n\n  /**\n   * (default: true)\n   * By default, format encoders share a global encoding buffer for performance\n   * and memory management reasons.\n   *\n   * When set to false, each format is allocated an individual encoding buffer.\n   *\n   * Enable to maximise performance and memory re-use, just be cautious of\n   * possible race conditions.\n   */\n  useGlobalEncodingBuffer: boolean,\n\n  /**\n   * (default: 1500)\n   * The maximum bytes that can be allocated to an encoding buffer.\n   *\n   * Default is 1500 bytes, the standard \"Maximum Transmission Unit\".\n   */\n  encodingBufferMaxSize: number,\n\n  /**\n   * (default: 256)\n   * Initial bytes to allocate for an encoding buffer.\n   */\n  encodingBufferInitialSize: number,\n\n  /**\n   * (default: 256)\n   * Additional bytes to allocated when dynamically increasing the size of an encoding buffer.\n   */\n  encodingBufferIncrement: number,\n};\n\n/** @internal */\nexport let cfg: TinybufConfig = {\n  safe: false,\n  useGlobalEncodingBuffer: true,\n  encodingBufferMaxSize: MTU,\n  encodingBufferInitialSize: 256,\n  encodingBufferIncrement: 256,\n};\n","import { cfg } from \"../config\";\nimport { TinybufError } from \"./errors\";\n\n/**\n * Wraps a buffer with a write head pointer.\n *\n * @internal\n */\nexport class BufferWriter {\n  public i: number = 0;\n  public _$dataView: DataView;\n\n  public constructor(initialSize: number) {\n    this._$dataView = new DataView(new ArrayBuffer(initialSize));\n  }\n\n  public $viewBytes(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset, this.i);\n  }\n\n  public $copyBytes(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer.slice(0, this.i));\n  }\n\n  // ----- Writers: -----\n\n  public $writeInt8(value: number): void {\n    this._$dataView.setInt8(this._$alloc(1), value);\n  }\n\n  public $writeInt16(value: number): void {\n    this._$dataView.setInt16(this._$alloc(2), value, true);\n  }\n\n  public $writeInt32(value: number): void {\n    this._$dataView.setInt32(this._$alloc(4), value, true);\n  }\n\n  public $writeUint8(value: number): void {\n    this._$dataView.setUint8(this._$alloc(1), value);\n  }\n\n  public $writeUint16(value: number): void {\n    this._$dataView.setUint16(this._$alloc(2), value, false); // big-endian for varint\n  }\n\n  public $writeUint32(value: number): void {\n    this._$dataView.setUint32(this._$alloc(4), value, false); // big-endian for varint\n  }\n\n  public $writeFloat32(value: number): void {\n    this._$dataView.setFloat32(this._$alloc(4), value, true);\n  }\n\n  public $writeFloat64(value: number): void {\n    this._$dataView.setFloat64(this._$alloc(8), value, true);\n  }\n\n  public $writeBytes(b: Uint8Array | ArrayBuffer | ArrayBufferView): void {\n    if (b.byteLength == null) {\n      throw new Error(`buffer had null byteLength: ${b.byteLength} - (buffer is null: ${b == null}) (stringified: ${JSON.stringify(b)}) (b instanceof string: ${typeof b === 'string'} (ab: ${b instanceof ArrayBuffer}) (abv: ${ArrayBuffer.isView(b)})`)\n    }\n    // allocate bytes first\n    const lol = this.i;\n    const j = this._$alloc(b.byteLength);\n\n    console.log(`buffer: allocating ${j} for a total of ${this._$dataView.byteLength}`);\n\n    let bBytes: Uint8Array;\n      try {\n       bBytes = ArrayBuffer.isView(b)\n       ? b instanceof Uint8Array ? b : new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n       : new Uint8Array(b);\n      }\n      catch (error) {\n        throw new Error('failed to copy bytes reason 11'); // FIXME: remove\n      }\n\n    // copy bytes\n    let newView: Uint8Array;\n    try {\n      newView = new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset + j, b.byteLength);\n    }\n    catch (error) {\n      throw new Error(`failed to copy bytes reason 61 - from ${lol} for ${b.byteLength} we're allocating ${j} for a total of ${this._$dataView.byteLength}`); // FIXME: remove\n    }\n    try {\n      newView.set(bBytes);\n    }\n    catch (error) {\n      throw new Error('failed to copy bytes reason 33'); // FIXME: remove\n    }\n    \n  }\n\n  // ----- Private methods: -----\n\n  /** @returns writer head (byteOffset) */\n  private _$alloc(bytes: number): number {\n    if (this.i + bytes > this._$dataView.byteLength) {\n      const minBytesNeeded = this.i + bytes - this._$dataView.byteLength;\n      const requestedNewBytes = Math.ceil(minBytesNeeded / cfg.encodingBufferIncrement) * cfg.encodingBufferIncrement;\n      this._$resizeBuffer(this._$dataView.byteLength + requestedNewBytes);\n    }\n\n    const j = this.i;\n    this.i += bytes;\n\n    return j;\n  }\n\n  private _$resizeBuffer(newSize: number): void {\n    if (newSize > cfg.encodingBufferMaxSize) {\n      // safety check\n      throw new TinybufError(`exceeded encodingBufferMaxSize: ${cfg.encodingBufferMaxSize}`);\n    }\n\n    const newBuf = new ArrayBuffer(newSize);\n\n    // copy bytes\n    const oldView = new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset, this._$dataView.byteLength);\n    new Uint8Array(newBuf).set(oldView);\n\n    // update ref\n    this._$dataView = new DataView(newBuf);\n  }\n}\n","/**\n * Wraps a buffer with a read head pointer.\n *\n * @internal\n */\nexport class BufferReader {\n  public i: number;\n  private _$dataView: DataView;\n\n  public constructor(b: Uint8Array | ArrayBufferView | ArrayBuffer, headerBytes?: number) {\n    this._$dataView = ArrayBuffer.isView(b)\n      ? new DataView(b.buffer, b.byteOffset, b.byteLength)\n      : new DataView(b);\n\n    this.i = headerBytes ?? 0; // internal offset (header)\n  }\n\n  /** Read the next byte, without moving the read head pointer. */\n  public $peek(): number {\n    return this._$dataView.getUint8(this.i);\n  }\n\n  /** Skip the next byte without reading it. */\n  public $skip(): void {\n    this.i++;\n  }\n\n  // ----- Readers: -----\n\n  public $readUint8(): number {\n    return this._$dataView.getUint8(this.i++);\n  }\n\n  public $readUint16(): number {\n    const r = this._$dataView.getUint16(this.i); // big-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readUint32(): number {\n    const r = this._$dataView.getUint32(this.i); // big-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readInt8(): number {\n    return this._$dataView.getInt8(this.i++);\n  }\n\n  public $readInt16(): number {\n    const r = this._$dataView.getInt16(this.i, true); // little-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readInt32(): number {\n    const r = this._$dataView.getInt32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat32(): number {\n    const r = this._$dataView.getFloat32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat64(): number {\n    const r = this._$dataView.getFloat64(this.i, true); // little-endian\n    this.i += 8;\n    return r;\n  }\n\n  /** @throws RangeError if exceeds length */\n  public $readBytes(bytes: number): Uint8Array {\n    if (this._$dataView.byteOffset + this.i + bytes > this._$dataView.byteLength) {\n      throw new RangeError('exceeded bytes');\n    }\n\n    const view = new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset + this.i, bytes);\n    this.i += bytes;\n\n    return view;\n  }\n}\n","import { writers, readers } from './lib/coders';\nimport * as coders from './lib/coders';\nimport { $hashCode, $strToHashCode } from './lib/hashCode';\nimport { peekHeader, peekHeaderStr } from './lib/peek';\nimport { BufferWriter } from './lib/BufferWriter';\nimport { BufferReader } from './lib/BufferReader';\nimport {\n  InferredDecodedType,\n  EncoderDefinition,\n  Type,\n  MaybeType,\n  InferredTransformConfig,\n  InferredValidationConfig,\n  ValidationFn,\n  Transforms,\n  FieldDefinition\n} from './Type';\nimport { cfg } from './config';\n\nexport type FormatHeader = string | number;\n\n/**\n * Decoded object types for a given binary format.\n * @example let onData = (data: Decoded<typeof MyBufferFormat>) => {...};\n */\nexport type Decoded<FromBufferFormat> = FromBufferFormat extends BufferFormat<infer EncoderType, any> ? InferredDecodedType<EncoderType> : never;\n\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(def: T): BufferFormat<T, HeaderType>;\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(h: HeaderType | null, def: T): BufferFormat<T, HeaderType>;\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(a?: HeaderType | T, b?: T): BufferFormat<T, HeaderType> {\n  return a !== null && typeof a === 'object'\n    ? new BufferFormat<T, HeaderType>(a as T)\n    : new BufferFormat<T, HeaderType>(b as T, a as HeaderType);\n}\n\nfunction isValidHeader(h: FormatHeader): boolean {\n  if (typeof h === 'number') return Number.isInteger(h) && h >= 0 && h <= 65_535;\n  if (typeof h === 'string') return new TextEncoder().encode(h).byteLength === 2;\n  return false;\n}\n\n/**\n * BufferFormat is a utility class for encoding and decoding binary data based\n * on a provided encoding format.\n *\n * @see {header}\n * @see {encode(data)}\n * @see {decode(binary)}\n */\nexport class BufferFormat<EncoderType extends EncoderDefinition, HeaderType extends FormatHeader = number> {\n  /** @internal */\n  private static _$globalWriter?: BufferWriter;\n\n  /**\n   * A unique identifier encoded as the first 2 bytes (or `undefined` if headerless).\n   *\n   * @see {peekHeader(...)}\n   * @see {peekHeaderStr(...)}\n   */\n  public header!: HeaderType;\n\n  /** @internal */\n  private _$header!: number; // always uint16 vesion\n  /** @internal */\n  private _$type!: Type;\n  /** @internal */\n  private _$fields!: Field[];\n  /** @internal */\n  private _$fieldsMap!: Map<string, Field>;\n\n  /** @internal */\n  private _$format?: string;\n  /** @internal */\n  private _$transforms?: Transforms<any> | undefined;\n  /** @internal */\n  private _$validate?: ValidationFn<any> | undefined;\n  /** @internal */\n  private _$hasValidationOrTransforms = false;\n  /** @internal */\n  private _$writer?: BufferWriter;\n\n  public get encodingBuffer(): DataView | undefined {\n    return this._$writer?._$dataView;\n  }\n\n  public constructor(\n    def: EncoderType,\n    header?: HeaderType | null,\n  ) {\n    // set definition\n    if (typeof def === 'string') {\n      this._$type = def;\n    }\n    else if (def instanceof MaybeType) {\n      throw new TypeError('Format cannot be optional');\n    }\n    else if (def instanceof Object) {\n      this._$type = undefined; // object\n      this._$fieldsMap = new Map();\n      this._$fields = Object.keys(def).map((name) => {\n        const f = new Field(name, def[name]);\n        this._$fieldsMap.set(name, f); // also set map entry\n        return f;\n      });\n\n      // set headers\n      if (header === undefined) {\n        this.header = $hashCode(this.f) as HeaderType; // automatic\n        this._$header = this.header as number;\n      }\n      else if (header === null) {\n        this.header = undefined; // headerless\n        this._$header = undefined;\n      }\n      else if (isValidHeader(header)) {\n        this.header = header; // manual\n        this._$header = typeof header === 'number' ? header : $strToHashCode(header);\n      }\n      else {\n        throw new TypeError(`Header must be uint16, 2 byte string, or null. Received: ${header}`);\n      }\n    }\n    else {\n      throw new TypeError('Format must be object or Type');\n    }\n  }\n\n  // ----- Static methods: -----\n\n  /**\n   * Read the header of a buffer as a number.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeader = peekHeader;\n\n  /**\n   * Read the header of a buffer as a string.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeaderStr = peekHeaderStr;\n\n  // ----- Accessors: -----\n\n  /**\n   * @example \"{uint8,str[]?}\"\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private get f(): string {\n    if (this._$format === undefined) {\n      this._$format = this._$fields !== undefined\n        ? `{${this._$fields.map(v => v.f).join(',')}}`\n        : `${this._$type}`;\n    }\n\n    return this._$format;\n  }\n\n  /** @internal */\n  private static _$initWriter(): BufferWriter {\n    if (cfg.useGlobalEncodingBuffer) {\n      if (!BufferFormat._$globalWriter) {\n        // lazy init: global encoding buffer created at max size\n        this._$globalWriter = new BufferWriter(cfg.encodingBufferInitialSize);\n      }\n\n      return this._$globalWriter;\n    }\n\n    return new BufferWriter(cfg.encodingBufferInitialSize);\n  }\n\n  /**\n   * Encode an object to bytes.\n   *\n   * **Warning:** Returns an unsafe view into the encoding buffer. Pass this reference to preserve\n   * performance, and to minimize memory allocation and fragmentation.\n   *\n   * @param data - data to encode\n   * @param preserveBytes - (default: `setTinybufConfig().safe`) When set to true, copies encoded\n   * bytes to a new buffer. When set to false, returns an unsafe view of bytes but prevents\n   * unnnecessary memory allocation and fragmentation.\n   *\n   * @returns a copy of encoded bytes\n   * @throws if fails to encode value to schema\n   */\n  public encode<DecodedType extends InferredDecodedType<EncoderType>>(\n    data: DecodedType,\n    preserveBytes?: boolean,\n  ): Uint8Array {\n    if (!this._$writer) {\n      // lazy init\n      this._$writer = BufferFormat._$initWriter();\n    }\n\n    // reset\n    this._$writer.i = 0;\n\n    if (this._$hasValidationOrTransforms) {\n      data = this._$preprocess(data);\n    }\n\n    this._$write(data, this._$writer);\n\n    return (preserveBytes ?? cfg.safe)\n      ? this._$writer.$copyBytes()\n      : this._$writer.$viewBytes();\n  }\n\n  /**\n   * Decode binary data to an object.\n   * @throws if fails to decode bytes to schema.\n   */\n  public decode<DecodedType = InferredDecodedType<EncoderType>>(b: Uint8Array | ArrayBufferView | ArrayBuffer): DecodedType {\n    return this._$read(new BufferReader(b, this.header === undefined ? 0 : 2));\n  }\n\n  /**\n   * Set additional transform functions to apply before encoding and after decoding.\n   */\n  public setTransforms(transforms: InferredTransformConfig<EncoderType> | Transforms<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (typeof transforms === 'function' || (Array.isArray(transforms) && typeof transforms[0]  === 'function')) {\n      this._$transforms = transforms;\n    }\n    else {\n      for (const name of Object.keys(transforms)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set transforms for field '${name}'`);\n        }\n\n        // Set validation for object.\n        field.$coder.setTransforms(transforms[name]);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Set additional validation rules which are applied on encode() and decode().\n   *\n   * - Validation functions should throw an error, return an error, or return boolean false.\n   * - Anything else is treated as successfully passing validation.\n   */\n  public setValidation(validations: InferredValidationConfig<EncoderType> | ValidationFn<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (typeof validations === 'function') {\n      this._$validate = validations;\n    }\n    else {\n      for (const name of Object.keys(validations)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set validation function for field '${name}'`);\n        }\n\n        field.$coder.setValidation(validations[name]);\n      }\n    }\n\n    return this;\n  }\n\n  // ----- Implementation: -----\n\n  /**\n   * @param value\n   * @param bw\n   * @throws if the value is invalid\n   *\n   * @internal\n   */\n  private _$write(value: any, bw: BufferWriter): void {\n    // write header\n    if (this._$header !== undefined) bw.$writeUint16(this._$header);\n\n    // write scalar\n    if (this._$type !== undefined) {\n      const safeValue = (this._$validate || this._$transforms) ? this._$preprocess(value) : value;\n\n      return writers[this._$type](safeValue, bw);\n    }\n\n    // check for object type\n    if (typeof value !== 'object' || !value) {\n      throw new TypeError('expected object type');\n    }\n\n    // write each field\n    for (const field of this._$fields) {\n      const subValue = value[field.$name];\n\n      if (field.$isOptional) {\n        if (subValue === undefined || subValue === null) {\n          coders.boolCoder.$write(false, bw);\n          continue; // skip\n        }\n        else {\n          coders.boolCoder.$write(true, bw);\n        }\n      }\n      else if (subValue == null) {\n        throw new Error(`missing required value: ${field.$name}`);\n      }\n\n      if (field.$isArray) {\n        // array\n        this._$writeArray(subValue, bw, field.$coder);\n        continue;\n      }\n\n      // scalar/object field\n      field.$coder._$write(subValue, bw);\n    }\n  }\n\n  /**\n   * pre-process: validation and/or transforms\n   * @internal\n   */\n  private _$preprocess<T extends Record<string, any>>(data: T): T {\n    if (this._$validate) this._$processValidation(data);\n\n    if (typeof this._$transforms === 'function') {\n      return this._$transforms(data);\n    }\n    else if (Array.isArray(this._$transforms) && typeof this._$transforms[0] === 'function') {\n      return this._$transforms[0](data);\n    }\n\n    return data;\n  }\n\n  /**\n   * post-process: validation and/or transforms\n   * @internal\n   */\n  private _$postprocess<T extends Record<string, any>>(data: T): T {\n    if (Array.isArray(this._$transforms) && typeof this._$transforms[1] === 'function') {\n      data = this._$transforms[1](data);\n    }\n\n    if (this._$validate) this._$processValidation(data);\n\n    return data;\n  }\n\n  private _$processValidation(data: any): void {\n    if (!this._$validate) return;\n    const res = this._$validate(data);\n    if (res instanceof Error) throw res;\n    if (res === false) throw new Error('failed validation');\n  }\n\n  /**\n   * This function will be executed only the first time\n   * After that, we'll compile the read routine and add it directly to the instance\n   * @param state\n   * @returns\n   * @throws if fails\n   *\n   * @internal\n   */\n  private _$read<DecodedType = InferredDecodedType<EncoderType>>(state: BufferReader): DecodedType {\n    // This function will be executed only the first time to compile the read routine.\n    // After that, we'll compile the read routine and add it directly to the instance\n\n    // Update the read method implementation.\n    this._$read = this._$compileFormatReadFn();\n\n    return this._$read(state);\n  }\n\n  /**\n   * Generate read function code for this coder.\n   *\n   * @example\n   * // new Type({a:'int', 'b?':['string']}) would emit:\n   *\n   * `return {\n   *   a: this._readField(0, state),\n   *   b: this._readField(1, state),\n   * }`\n   *\n   * @internal\n   */\n  private _$makeObjectReader(): string {\n    const fieldsStr: string = this._$fields\n      .map(({ $name: name }, i) => `${name}:this.${this._$readField.name}(${i},state)`)\n      .join(',');\n\n    return `return{${fieldsStr}}`;\n  }\n\n  /**\n   * Read an individual field.\n   * @internal\n   */\n  private _$readField(fieldId: number, state: BufferReader): any {\n    const field = this._$fields[fieldId];\n\n    if (field.$isOptional && !coders.boolCoder.$read(state)) {\n      return undefined;\n    }\n\n    if (field.$isArray) {\n      return this._$readArray(field.$coder, state);\n    }\n\n    return field.$coder._$read(state);\n  }\n\n  /**\n   * Compile the decode() method for this object.\n   *\n   * @internal\n   */\n  private _$compileFormatReadFn<DecodedType = InferredDecodedType<EncoderType>>(): (state: BufferReader) => DecodedType {\n    if (this._$type !== undefined) {\n      // object type\n      return this._$hasValidationOrTransforms\n        ? (s) => this._$postprocess(readers[this._$type](s))\n        : readers[this._$type];\n    }\n\n    // scalar type\n    return new Function('state', this._$makeObjectReader()) as any;\n  }\n\n  /**\n   * @internal\n   */\n  private _$writeArray(value: any[], bw: BufferWriter, type: BufferFormat<any, any>): void {\n    if (!Array.isArray(value)) {\n      throw new TypeError(`expected array, instead got: ${value}`);\n    }\n\n    coders.uintCoder.$write(value.length, bw);\n    for (let i = 0; i < value.length; i++) {\n      type._$write(value[i], bw);\n    }\n  }\n\n  /**\n   * @throws if invalid data\n   * @internal\n   */\n  private _$readArray<T extends EncoderDefinition>(type: BufferFormat<T, any>, state: any): Array<T> {\n    const arr = new Array(/* length: */ coders.uintCoder.$read(state));\n    for (let j = 0; j < arr.length; j++) {\n      arr[j] = type._$read(state);\n    }\n    return arr;\n  }\n}\n\n/**\n * Parses and represents an object field.\n *\n * @internal\n */\nclass Field {\n  public $name: string;\n  public $coder: BufferFormat<any>;\n  public $isOptional: boolean;\n  public $isArray: boolean;\n\n  private _$formatString?: string;\n\n  public constructor(name: string, rawType: FieldDefinition) {\n    this.$isOptional = rawType instanceof MaybeType;\n    let type = rawType instanceof MaybeType ? rawType.type : rawType;\n\n    this.$name = name;\n\n    if (Array.isArray(type)) {\n      if (type.length !== 1) {\n        throw new TypeError('Array type must contain exactly one format');\n      }\n\n      type = type[0];\n      this.$isArray = true;\n    }\n    else {\n      this.$isArray = false;\n    }\n\n    this.$coder = new BufferFormat<any>(type, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public get f(): string {\n    if (this._$formatString === undefined) {\n      this._$formatString = `${(this.$coder as any).f}${this.$isArray ? '[]' : ''}${this.$isOptional ? '?' : ''}`;\n    }\n\n    return this._$formatString;\n  }\n}\n"],"names":["TinybufError","Error","$hashCode","str","hash","i","length","charCodeAt","$strToHashCode","$hashCodeToStr","hashCode","String","fromCharCode","Math","floor","peekHeader","b","ArrayBuffer","isView","DataView","buffer","byteOffset","getUint16","peekHeaderStr","bufferParser","BufferParser","constructor","this","_$formats","Map","processBuffer","f","data","cb","header","has","get","decode","e","err","stack","on","format","callback","overwritePrevious","set","ignore","forEach","clear","$floor","$ceil","ceil","$clamp","value","min","max","$roundTowardZero","x","$roundAwayFromZero","uscalround","$fromuscal8","$touscal8","scalround","$fromscal8","$toscal8","Type","MaybeType","type","optional","t","mask","padBit","reduce","n","unmask","len","clz32","result","Array","$utf8encode","encoder","TextEncoder","encode","$utf8decode","decoder","TextDecoder","y","f16round","$fromf16","$tof16","Float32Array","Int32Array","s","z","pow","d","m","Infinity","NaN","MAX_VARINT32","POW_32","uintCoder","$write","writer","$writeUint8","$writeUint16","$writeUint32","$read","reader","firstByte","$peek","$readUint32","$readUint16","$skip","uint8Coder","$readUint8","uint16Coder","uint32Coder","intCoder","intValue","int8Coder","$writeInt8","$readInt8","int16Coder","$writeInt16","$readInt16","int32Coder","$writeInt32","$readInt32","float16Coder","float32Coder","$writeFloat32","$readFloat32","float64Coder","$writeFloat64","$readFloat64","uscalar8Coder","scalar8Coder","dateCoder","getTime","Date","stringCoder","bytes","bufferCoder","byteLength","$writeBytes","$readBytes","boolCoder","boolsCoder","slice","jsonCoder","JSON","stringify","parse","regexCoder","global","ignoreCase","multiline","source","g","RegExp","writers","UInt","UInt8","UInt16","UInt32","Int","Int8","Int16","Int32","Float64","Float32","Float16","Scalar8","UScalar8","Bool","Bools","Buffer","readers","setTinybufConfig","c","cfg","Object","assign","safe","useGlobalEncodingBuffer","encodingBufferMaxSize","encodingBufferInitialSize","encodingBufferIncrement","BufferWriter","initialSize","_$dataView","$viewBytes","Uint8Array","$copyBytes","setInt8","_$alloc","setInt16","setInt32","setUint8","setUint16","setUint32","setFloat32","setFloat64","lol","j","bBytes","newView","console","log","error","minBytesNeeded","requestedNewBytes","_$resizeBuffer","newSize","newBuf","oldView","BufferReader","headerBytes","getUint8","r","getUint32","getInt8","getInt16","getInt32","getFloat32","getFloat64","RangeError","view","defineFormat","a","BufferFormat","encodingBuffer","_$writer","_a","def","_$hasValidationOrTransforms","_$type","TypeError","undefined","_$fieldsMap","_$fields","keys","map","name","Field","_$header","isValidHeader","h","Number","isInteger","_$format","v","join","_$initWriter","_$globalWriter","preserveBytes","_$preprocess","_$write","_$read","setTransforms","transforms","isArray","_$transforms","field","$coder","setValidation","validations","_$validate","bw","safeValue","subValue","$name","$isOptional","coders.boolCoder","$isArray","_$writeArray","_$processValidation","_$postprocess","res","state","_$compileFormatReadFn","_$makeObjectReader","_$readField","fieldId","_$readArray","Function","coders.uintCoder","arr","rawType","_$formatString"],"mappings":"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"}