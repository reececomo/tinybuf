{"version":3,"file":"index.mjs","sources":["../src/core/lib/errors.ts","../src/core/lib/hashCode.ts","../src/core/lib/peek.ts","../src/core/BufferParser.ts","../src/core/lib/math.ts","../src/core/lib/scalar.ts","../src/core/lib/bitmask.ts","../src/core/lib/utf8.ts","../src/core/lib/coders.ts","../src/core/config.ts","../src/core/lib/float16.ts","../src/core/lib/BufferWriter.ts","../src/core/lib/BufferReader.ts","../src/core/Type.ts","../src/core/BufferFormat.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unified-signatures */\n\nexport class TinybufError extends Error {}\n\nexport class EncodeError extends TinybufError {\n  public constructor(message: string)\n  public constructor(expectedType: string, value: any)\n  public constructor(a: string, b?: any) {\n    super(`failed to encode '${a}' (data: ${b})`);\n  }\n}\n\nexport class DecodeError extends TinybufError {\n  public constructor(\n    summary: string,\n    public readonly cause: Error,\n  ) {\n    super(`${summary}: ${cause.message}`);\n    this.stack = cause.stack;\n  }\n}\n","/**\n * DJB2 hash algorithm (modified for 16-bit uints).\n *\n * DJB2 is a simple and widely used non-cryptographic\n * hash function created by Daniel J. Bernstein.\n *\n * @returns 16-bit unsigned integer\n */\nexport function $hashCode(str: string): number {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return hash & 0xFFFF; // Ensure the result is a Uint16\n}\n\n/**\n * Returns an unsigned 16-bit integer hashcode for some string.\n * Prefers 2 character string.\n *\n * @returns A UInt16 between 0 and 65535 (inclusive).\n */\nexport function $strToHashCode(str: string): number {\n  if (str.length !== 2) return $hashCode(str);\n  return str.charCodeAt(0) * 256 + str.charCodeAt(1);\n}\n\n/**\n * Convert a UInt16 hashcode to a 2-byte string.\n */\nexport function $hashCodeToStr(hashCode: number): string {\n  return String.fromCharCode(Math.floor(hashCode / 256)) + String.fromCharCode(hashCode % 256);\n}\n","import { $hashCodeToStr } from \"./hashCode\";\n\n\n/**\n * Read the header bytes of a buffer as a number.\n *\n * @throws {RangeError} if buffer size < 2\n */\nexport function peekHeader(b: ArrayBuffer | ArrayBufferView): number {\n  return new DataView(b instanceof ArrayBuffer ? b : b.buffer).getUint16(0, false);\n}\n\n/**\n * Read the header bytes of a buffer as a string.\n *\n * @throws {RangeError} if buffer length < 2\n */\nexport function peekHeaderStr(b: ArrayBuffer | ArrayBufferView): string {\n  return $hashCodeToStr(peekHeader(b));\n}\n","import { BufferFormat } from \"./BufferFormat\";\nimport { EncoderDefinition, InferredDecodedType } from \"./Type\";\nimport { DecodeError, TinybufError } from \"./lib/errors\";\nimport { $hashCodeToStr, $strToHashCode } from \"./lib/hashCode\";\nimport { peekHeader } from \"./lib/peek\";\n\ntype AnyFormat = BufferFormat<any, any>;\ntype Uint16FormatHeader = number;\n\n/**\n * Small utility for registering and processing format handlers.\n *\n * @example\n * const myHandler = bufferParser()\n *   .on(FormatA, aData => {})\n *   .on(FormatB, bData => {});\n *\n * myHandler.processBuffer(bytes);\n */\nexport const bufferParser = (): BufferParser => new BufferParser();\n\nexport class BufferParser {\n  /** @internal */\n  private _$formats = new Map<Uint16FormatHeader, [AnyFormat, (data: any) => any]>();\n\n  /**\n   * Decode an array buffer and trigger the relevant data handler.\n   *\n   * When passed an ArrayBufferView, accesses the underlying 'buffer' instance directly.\n   *\n   * @throws {TinybufError} if fails to decode, or no handler is registered\n   */\n  public processBuffer(b: ArrayBuffer | ArrayBufferView): void {\n    let f: any, data: any, cb: (data: any) => any;\n\n    try {\n      const header = peekHeader(b);\n\n      if (!this._$formats.has(header)) {\n        throw new TinybufError(`Unknown format: ${header} '${$hashCodeToStr(header)}')`);\n      }\n\n      [f, cb] = this._$formats.get(header);\n      data = f.decode(b);\n    }\n    catch (e) {\n      throw new DecodeError('Failed to decode', e);\n    }\n\n    cb(data);\n  }\n\n  /**\n   * Register a format handler.\n   */\n  public on<EncoderType extends EncoderDefinition, DecodedType = InferredDecodedType<EncoderType>>(\n    format: BufferFormat<EncoderType, string | number>,\n    callback: (data: DecodedType) => any,\n    overwritePrevious: boolean = false,\n  ): this {\n    if (format.header == null) {\n      throw new TinybufError('Format requires header');\n    }\n\n    const header = typeof format.header === 'string' ? $strToHashCode(format.header) : format.header;\n\n    if (this._$formats.has(header) && !overwritePrevious) {\n      throw new TinybufError(`Format header collision: ${format.header}`);\n    }\n\n    this._$formats.set(header, [format, callback]);\n\n    return this;\n  }\n\n  /** Register a format (or formats) that are recognized. */\n  public ignore(...format: AnyFormat[]): this {\n    format.forEach(f => this.on(f, () => {}, true));\n    return this;\n  }\n\n  /** Clears all registered formats and handlers. */\n  public clear(): void {\n    this._$formats.clear();\n  }\n}\n","export const $floor = Math.floor,\n  $ceil = Math.ceil;\n\n/** Clamp a number to a range. */\nexport const $clamp = (value: number, min: number, max: number): number =>\n  value > max ? max : value < min ? min : value;\n\n/** Round toward zero */\nexport const $roundTowardZero = (x: number): number => x < 0 ? $ceil(x) : $floor(x);\n\n/** Round away zero */\nexport const $roundAwayFromZero = (x: number): number =>\n  x < 0 ? $floor(x) : $ceil(x);\n","import { $clamp, $roundTowardZero, $roundAwayFromZero } from \"./math\";\n\n/**\n * Quantize a number to an 8-bit scalar between 0.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function uscalround(x: number): number {\n  return $fromuscal8($touscal8(x));\n}\n\n/**\n * Quantize a number to an 8-bit signed scalar between -1.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function scalround(x: number): number {\n  return $fromscal8($toscal8(x));\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $touscal8(x: number): number {\n  return $clamp(127 + $roundTowardZero(x * 254 - 127), 0, 254);\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $toscal8(x: number): number {\n  return $clamp($roundTowardZero(x * 127), -127, 127) + 127;\n}\n\n/** @returns An unsigned scalar between 0.0 and 1.0. */\nexport function $fromuscal8(x: number): number {\n  // Make symmetric: (0.5 + round((uint8 - 127) / 254 * 100)) / 100\n  return $clamp(($roundAwayFromZero((x - 127) * 0.3937007874015748) + 50) * 0.01, 0, 1);\n}\n\n/** @returns A signed scalar between -1.0 and 1.0. */\nexport function $fromscal8(x: number): number {\n  // Make symmetric: round((uint8 - 127) / 127 * 100) / 100\n  return $clamp($roundAwayFromZero((x - 127) * 0.787401574803149) * 0.01, -1, 1);\n}\n","export const mask = (x: boolean[]): number => {\n  if (x.length > 30) x = x.slice(0, 30);\n  return x.reduce((n, b: any) => (n << 1) | b, 1 /* pad */);\n};\n\nexport const unmask = (x: number, len = 31 - Math.clz32(x) /* pad bit + 1 */): boolean[] => {\n  const result = new Array<boolean>(len);\n  for (let i = 0; i < len; i++) result[i] = !!(x & (1 << (len - 1 - i)));\n  return result;\n};\n","const encoder = new TextEncoder();\nconst decoder = new TextDecoder('utf-8');\n\nexport const $utf8encode = (x?: string): Uint8Array => encoder.encode(x);\nexport const $utf8decode = (y: Uint8Array): string => decoder.decode(y);\n","import { BufferWriter } from './BufferWriter';\nimport { BufferReader } from './BufferReader';\nimport {\n  $fromuscal8,\n  $fromscal8,\n  $touscal8,\n  $toscal8\n} from './scalar';\nimport { Type } from '../Type';\nimport { mask, unmask } from './bitmask';\nimport { $utf8decode, $utf8encode } from './utf8';\nimport { $floor } from './math';\n\n// Pre-calculated constants\nconst MAX_VARUINT8 = 128,\n  MAX_VARUINT16 = 16_384,\n  MAX_VARUINT32 = 536_870_912,\n  MAX_VARINT8 = 64,\n  MAX_VARINT16 = 8_192,\n  MAX_VARINT32 = 268_435_456,\n  POW_32 = 0x100000000;\n\nexport interface BinaryTypeCoder<T, R = T> {\n  $write(value: T, writer: BufferWriter): void;\n  $read(reader: BufferReader): R;\n}\n\n/**\n * Formats (big-endian):\n * 7b   0xxx xxxx\n * 14b  10xx xxxx  xxxx xxxx\n * 29b  110x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n * 61b  111x xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx  xxxx xxxx\n */\nexport const uintCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (value < MAX_VARUINT8) {\n      writer.$writeUInt8(value);\n    }\n    else if (value < MAX_VARUINT16) {\n      writer.$writeUInt16(value + 0x8000);\n    }\n    else if (value < MAX_VARUINT32) {\n      writer.$writeUInt32(value + 0xc0000000);\n    }\n    else {\n      writer.$writeUInt32($floor(value / POW_32) + 0xe0000000);\n      writer.$writeUInt32(value >>> 0);\n    }\n  },\n  $read: (reader) => {\n    const firstByte = reader.$peek();\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      return reader.$readUint16() - 0x8000;\n    }\n    else if (!(firstByte & 0x20)) {\n      return reader.$readUint32() - 0xc0000000;\n    }\n\n    return (reader.$readUint32() - 0xe0000000) * POW_32\n      + reader.$readUint32();\n  }\n};\n\nexport const uint8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUInt8(value),\n  $read: (reader) => reader.$readUint8(),\n};\n\nexport const uint16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUInt16(value),\n  $read: (reader) => reader.$readUint16(),\n};\n\nexport const uint32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUInt32(value),\n  $read: (reader) => reader.$readUint32(),\n};\n\n/**\n * Same formats as uintCoder.\n *\n * @see {uintCoder}\n */\nexport const intCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (value >= -MAX_VARINT8 && value < MAX_VARINT8) {\n      writer.$writeUInt8(value & 0x7f);\n    }\n    else if (value >= -MAX_VARINT16 && value < MAX_VARINT16) {\n      writer.$writeUInt16((value & 0x3fff) + 0x8000);\n    }\n    else if (value >= -MAX_VARINT32 && value < MAX_VARINT32) {\n      writer.$writeUInt32((value & 0x1fffffff) + 0xc0000000);\n    }\n    else {\n      const intValue = value;\n      // Split in two 32b uints\n      writer.$writeUInt32(($floor(intValue / POW_32) & 0x1fffffff) + 0xe0000000);\n      writer.$writeUInt32(intValue >>> 0);\n    }\n  },\n  $read: (reader) => {\n    let firstByte = reader.$peek(), i: number;\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return (firstByte & 0x40) ? (firstByte | 0xffffff80) : firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      i = reader.$readUint16() - 0x8000;\n      return (i & 0x2000) ? (i | 0xffffc000) : i;\n    }\n    else if (!(firstByte & 0x20)) {\n      i = reader.$readUint32() - 0xc0000000;\n      return (i & 0x10000000) ? (i | 0xe0000000) : i;\n    }\n    else {\n      i = reader.$readUint32() - 0xe0000000;\n      i = (i & 0x10000000) ? (i | 0xe0000000) : i;\n      return i * POW_32 + reader.$readUint32();\n    }\n  }\n};\n\nexport const int8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt8(value),\n  $read: (reader) => reader.$readInt8(),\n};\n\nexport const int16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt16(value),\n  $read: (reader) => reader.$readInt16(),\n};\n\nexport const int32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt32(value),\n  $read: (reader) => reader.$readInt32(),\n};\n\nexport const float16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat16(value),\n  $read: (reader) => reader.$readFloat16(),\n};\n\nexport const float32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat32(value),\n  $read: (reader) => reader.$readFloat32(),\n};\n\nexport const float64Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat64(value),\n  $read: (reader) => reader.$readFloat64(),\n};\n\nexport const uscalarCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUInt8($touscal8(value)),\n  $read: (reader) => $fromuscal8(reader.$readUint8()),\n};\n\nexport const scalarCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUInt8($toscal8(value)),\n  $read: (reader) => $fromscal8(reader.$readUint8()),\n};\n\nexport const dateCoder: BinaryTypeCoder<Date> = {\n  $write: (value, writer) => intCoder.$write(value.getTime(), writer),\n  $read: (reader) => new Date(intCoder.$read(reader)),\n};\n\nexport const stringCoder: BinaryTypeCoder<string> = {\n  $write: (value, writer) => bufferCoder.$write($utf8encode(value), writer),\n  $read: (reader) => $utf8decode(bufferCoder.$read(reader)),\n};\n\nexport const bufferCoder: BinaryTypeCoder<ArrayBuffer | ArrayBufferView, Uint8Array> = {\n  $write: (value, writer) => {\n    uintCoder.$write(value.byteLength, writer); // header byte (length)\n    writer.$writeBuffer(value);\n  },\n  $read: (reader) => reader.$readBuffer(uintCoder.$read(reader)),\n};\n\nexport const boolCoder: BinaryTypeCoder<boolean> = {\n  $write: (value, writer) => writer.$writeUInt8(value ? 1 : 0),\n  $read: (reader) => reader.$readUint8() !== 0,\n};\n\nexport const boolsCoder: BinaryTypeCoder<boolean[]> = {\n  $write: (value, writer) => uintCoder.$write(mask(value), writer),\n  $read: (reader) => unmask(uintCoder.$read(reader)),\n};\n\nexport const jsonCoder: BinaryTypeCoder<any> = {\n  $write: (value, writer) => stringCoder.$write(JSON.stringify(value), writer),\n  $read: (reader) => JSON.parse(stringCoder.$read(reader)),\n};\n\nexport const regexCoder: BinaryTypeCoder<RegExp> = {\n  $write: (value, writer) => {\n    writer.$writeUInt8(mask([value.global, value.ignoreCase, value.multiline]));\n    stringCoder.$write(value.source, writer);\n  },\n  $read: (reader) => {\n    const [g, i, m] = unmask(reader.$readUint8());\n    return new RegExp(stringCoder.$read(reader), (g ? 'g' : '') + (i ? 'i' : '') + (m ? 'm' : ''));\n  }\n};\n\n/**\n * Array of coders, indexed by type\n */\nexport const CODERS: Record<Type, BinaryTypeCoder<any>> = [\n  uintCoder, // Type.UInt\n  uint8Coder, // Type.UInt8\n  uint16Coder, // Type.UInt16\n  uint32Coder, // Type.UInt32\n  intCoder, // Type.Int\n  int8Coder, // Type.Int8\n  int16Coder, // Type.Int16\n  int32Coder, // Type.Int32\n  float64Coder, // Type.Float64\n  float32Coder, // Type.Float32\n  float16Coder, // Type.Float16\n  scalarCoder, // Type.Scalar\n  uscalarCoder, // Type.UScalar\n  boolCoder, // Type.Bool\n  boolsCoder, // Type.Bools\n  stringCoder, // Type.String\n  bufferCoder, // Type.Buffer\n  jsonCoder, // Type.JSON\n  regexCoder, // Type.RegExp\n  dateCoder, // Type.Date\n];\n","/** Default maximum transmission unit in networking */\nconst MTU = 1500;\n\n/** Set Tinybuf global config */\nexport const setTinybufConfig = (c: Partial<TinybufConfig>): void => {\n  cfg = { ...cfg, ...c };\n};\n\nexport type TinybufConfig = {\n  /**\n   * (default: false)\n   * By default `BufferFormat.encode(…)` optimizes performance and memory by\n   * encoding data to a shared buffer, and returning a `Uint8Array` pointer\n   * to the encoded bytes.\n   *\n   * Subsequent calls to `encode(…)` are destructive, so this would be\n   * unsuitable for asyncronous usage (e.g. Promises, Web Workers).\n   *\n   * Set `safe` to true to copy bytes to a new buffer and return that.\n   */\n  safe: boolean,\n\n  /**\n   * (default: true)\n   * By default, format encoders share a global encoding buffer for performance\n   * and memory management reasons.\n   *\n   * When set to false, each format will be allocated its own resizable\n   * encoding buffer.\n   *\n   * Enable to maximise performance and memory re-use, just be cautious of\n   * possible race conditions.\n   */\n  useGlobalEncodingBuffer: boolean,\n\n  /**\n   * (default: 1500)\n   * The maximum bytes to allocate to an encoding buffer. If using the global\n   * encoding buffer, this is the size it is initialized to.\n   */\n  encodingBufferMaxSize: number,\n\n  /**\n   * (default: 256)\n   * Initial bytes to allocate to individual format encoding buffers, if used.\n   */\n  encodingBufferInitialSize: number,\n\n  /**\n   * (default: 256)\n   * Additional bytes when resizing individual format encoding buffers, if used.\n   */\n  encodingBufferIncrement: number,\n};\n\n/** @internal */\nexport let cfg: TinybufConfig = {\n  safe: false,\n  useGlobalEncodingBuffer: true,\n  encodingBufferMaxSize: MTU,\n  encodingBufferInitialSize: 256,\n  encodingBufferIncrement: 256,\n};\n","/**\n * Returns the nearest half precision float representation of a number.\n * @param x A numeric expression.\n */\nexport function f16round(x: number): number {\n  return $fromf16($tof16(x));\n}\n\n/**\n * Returns the nearest half precision float representation of a number as a 16-bit bitmask.\n */\nexport const $tof16 = (function() {\n  const x = new Float32Array(1);\n  const y = new Int32Array(x.buffer);\n\n  return function (f: number) {\n    x[0] = f;\n    let i = y[0]; // 32-bit int\n    let s = (i >> 16) & 0X8000; // sign\n    let z = (i & 0X7FFFFFFF) + 0X1000 | 0;\n\n    if (z >= 0X47800000) {\n      if ((i & 0X7FFFFFFF) < 0X47800000) return s | 0X7BFF;\n      if (z < 0X7F800000) return s | 0X7C00;\n      return s | 0X7C00 | (i & 0X007FFFFF) >> 13;\n    }\n    if (z >= 0X38800000) return s | z - 0X38000000 >> 13;\n    else if (z < 0X33000000) return s;\n    z = (i & 0X7FFFFFFF) >> 23;\n    return s | ((i & 0X7FFFFF | 0X800000)\n      + (0X800000 >>> z - 102)\n      >> 126 - z);\n  };\n}());\n\n/**\n * Returns the nearest half precision float value for a 16-bit bitmask.\n */\nexport const $fromf16 = (function() {\n  const x = Float64Array.from({ length: 32 }, (_, e) => Math.pow(2, e - 15)); // biased exponents\n  const y = Float64Array.from({ length: 1024 }, (_, m) => 1 + m / 1024); // normalized mantissas\n  const z = Math.pow(2, -24); // subnormal constant\n\n  return function (b: number): number {\n    const s = (b & 32768) === 32768 ? -1 : 1; // sign: 1 bit\n    const e = b & 31744; // exponent: 5 bits\n    const m = b & 1023; // mantissa: 10 bits\n\n    if (e === 0) return m === 0 ? s * 0 : s * z;\n    if (e === 31744) return m === 0 ? s * Infinity : NaN;\n    return s * x[e >> 10] * y[m];\n  };\n}());\n","import { cfg } from \"../config\";\nimport { EncodeError } from \"./errors\";\nimport { $tof16 } from \"./float16\";\n\n/**\n * Wraps a view into an underlying buffer, and can be dynamically resized.\n *\n * @internal\n */\nexport class BufferWriter {\n  public $byteOffset: number = 0;\n\n  private _$dataView: DataView;\n  private _$buf: ArrayBuffer;\n  private readonly _$autoResize: boolean;\n\n  public constructor(value: number | ArrayBuffer) {\n    if (value instanceof ArrayBuffer) {\n      this._$buf = value;\n      this._$autoResize = false;\n    }\n    else {\n      this._$buf = new ArrayBuffer(value);\n      this._$autoResize = true;\n    }\n\n    this._$dataView = new DataView(this._$buf, 0, this._$buf.byteLength);\n  }\n\n  public $asView(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer, 0, this.$byteOffset);\n  }\n\n  public $asCopy(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer.slice(0, this.$byteOffset));\n  }\n\n  // ----- Writers: -----\n\n  public $writeInt8(value: number): void {\n    this._$dataView.setInt8(this._$alloc(1), value);\n  }\n\n  public $writeInt16(value: number): void {\n    this._$dataView.setInt16(this._$alloc(2), value, true); // little-endian\n  }\n\n  public $writeInt32(value: number): void {\n    this._$dataView.setInt32(this._$alloc(4), value, true); // little-endian\n  }\n\n  public $writeUInt8(value: number): void {\n    this._$dataView.setUint8(this._$alloc(1), value);\n  }\n\n  public $writeUInt16(value: number): void {\n    this._$dataView.setUint16(this._$alloc(2), value, false); // big-endian\n  }\n\n  public $writeUInt32(value: number): void {\n    this._$dataView.setUint32(this._$alloc(4), value, false); // big-endian\n  }\n\n  public $writeFloat16(value: number): void {\n    this._$dataView.setUint16(this._$alloc(2), $tof16(value), true);\n  }\n\n  public $writeFloat32(value: number): void {\n    this._$dataView.setFloat32(this._$alloc(4), value, true);\n  }\n\n  public $writeFloat64(value: number): void {\n    this._$dataView.setFloat64(this._$alloc(8), value, true);\n  }\n\n  public $writeBuffer(b: ArrayBuffer | ArrayBufferView): void {\n    const byteOffset = this._$alloc(b.byteLength);\n    const readView = b instanceof Uint8Array ? b\n      : b instanceof ArrayBuffer ? new Uint8Array(b)\n        : new Uint8Array(b.buffer, b.byteOffset, b.byteLength);\n    new Uint8Array(this._$dataView.buffer, byteOffset, b.byteLength).set(readView);\n  }\n\n  // ----- Private methods: -----\n\n  /** Allocate the given number of bytes, and then return the current header position (byteOffset). */\n  private _$alloc(bytes: number): number {\n    if (this.$byteOffset + bytes <= this._$dataView.byteLength) {\n      const i = this.$byteOffset; // copy\n      this.$byteOffset += bytes;\n\n      return i;\n    }\n\n    const currentAlloc = this._$dataView.byteLength;\n    const minRequestedSize = currentAlloc + bytes;\n    if (!this._$autoResize || minRequestedSize > cfg.encodingBufferMaxSize) {\n      throw new EncodeError(`exceeded max encoding buffer size: ${cfg.encodingBufferMaxSize}`);\n    }\n\n    let newLength = this._$dataView.byteLength;\n    do {\n      newLength = Math.min(newLength + cfg.encodingBufferIncrement, cfg.encodingBufferMaxSize);\n    }\n    while (newLength < this.$byteOffset + bytes);\n\n    // copy bytes to new buffer\n    const newBuffer = new ArrayBuffer(newLength);\n    const currentData = new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset, currentAlloc);\n    new Uint8Array(newBuffer).set(currentData);\n\n    // update the view\n    this._$buf = newBuffer;\n    this._$dataView = new DataView(newBuffer);\n\n    // increment the pointer\n    const i = this.$byteOffset; // copy\n    this.$byteOffset += bytes;\n\n    return i;\n  }\n}\n","import { $fromf16 } from \"./float16\";\n\n/**\n * Wraps a buffer with a read head pointer.\n *\n * @internal\n */\nexport class BufferReader {\n  public i: number;\n  private _$dataView: DataView;\n\n  public constructor(b: Uint8Array | ArrayBufferView | ArrayBuffer, byteOffset?: number) {\n    this._$dataView = b instanceof ArrayBuffer ? new DataView(b) : new DataView(b.buffer, b.byteOffset, b.byteLength);\n    this.i = byteOffset ?? 0; // internal offset (header)\n  }\n\n  /** Read the next byte, without moving the read head pointer. */\n  public $peek(): number {\n    return this._$dataView.getUint8(this.i);\n  }\n\n  /** Skip the next byte without reading it. */\n  public $skip(): void {\n    this.i++;\n  }\n\n  // ----- Readers: -----\n\n  public $readUint8(): number {\n    return this._$dataView.getUint8(this.i++);\n  }\n\n  public $readUint16(): number {\n    const r = this._$dataView.getUint16(this.i); // big-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readUint32(): number {\n    const r = this._$dataView.getUint32(this.i); // big-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readInt8(): number {\n    return this._$dataView.getInt8(this.i++);\n  }\n\n  public $readInt16(): number {\n    const r = this._$dataView.getInt16(this.i, true); // little-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readInt32(): number {\n    const r = this._$dataView.getInt32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat16(): number {\n    const r = this._$dataView.getUint16(this.i, true); // little-endian\n    this.i += 2;\n    return $fromf16(r);\n  }\n\n  public $readFloat32(): number {\n    const r = this._$dataView.getFloat32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat64(): number {\n    const r = this._$dataView.getFloat64(this.i, true); // little-endian\n    this.i += 8;\n    return r;\n  }\n\n  /** @throws RangeError if exceeds length */\n  public $readBuffer(bytes: number): Uint8Array {\n    if (this.i + bytes > this._$dataView.byteLength) {\n      throw new RangeError();\n    }\n\n    const view = new Uint8Array(this._$dataView.buffer, this.i, bytes);\n    this.i += bytes;\n\n    return view;\n  }\n}\n","/**\n * Field types for defining encoding formats.\n *\n * @see [Get started: Types](https://github.com/reececomo/tinybuf/blob/main/docs/get_started.md#types)\n */\nexport const enum Type {\n  /**\n   * Unsigned integer (1 - 8 bytes).\n   * - 0 → 127 = 1 byte\n   * - 128 → 16,384 = 2 bytes\n   * - 16,385 → 536,870,911 = 4 bytes\n   * - 536,870,912 → `Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  UInt,\n\n  /** Unsigned 8-bit integer (between 0 and 255, 1 byte). */\n  UInt8,\n\n  /** Unsigned 16-bit integer (between 0 and 65,535, 2 bytes). */\n  UInt16,\n\n  /** Unsigned 32-bit integer (between 0 and 4,294,967,295, 4 bytes). */\n  UInt32,\n\n  /**\n   * Signed integer (1 - 8 bytes).\n   * - 0 → ±64 = 1 byte\n   * - ±65 → ±8,192 = 2 bytes\n   * - ±8,193 → ±268,435,456 = 4 bytes\n   * - ±268,435,457 → ±`Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  Int,\n\n  /** Signed 1 byte integer (between -127 and 127). */\n  Int8,\n\n  /** Signed 2 byte integer (between -32,767 and 32,767). */\n  Int16,\n\n  /** Signed 4 byte integer (between -2,147,483,647 and 2,147,483,647). */\n  Int32,\n\n  /** Default JavaScript `number` type. Floating-point number (64-bit, double precision, 8 bytes). */\n  Float64,\n\n  /** Floating-point number (32-bit, single precision, 4 bytes). */\n  Float32,\n\n  /**\n   * Floating-point number (16-bit, half precision, 2 bytes).\n   *\n   * **Warning:** Low precision; maximum range: ±65,504.\n   */\n  Float16,\n\n  /** A signed scalar between -1.00 and 1.00 (1 byte). */\n  Scalar,\n\n  /** An unsigned scalar between 0.00 and 1.00 (1 byte). */\n  UScalar,\n\n  /**\n   * Boolean value (1 byte).\n   * @see {Bools} for packing multiple booleans into a single byte.\n   */\n  Bool,\n\n  /** Any array of booleans (1 bit overhead, encoded as UInt). */\n  Bools,\n\n  /** A string (1† byte header + string bytes). */\n  String,\n\n  /** Any Uint8Array, ArrayBuffer or ArrayBufferLike value (1† byte header + buffer bytes). */\n  Buffer,\n\n  /** Any JSON-serializable data. Encodes as a UTF-8 string. */\n  JSON,\n\n  /** JavaScript regular expression. */\n  RegExp,\n\n  /**\n   * JavaScript date object.\n   *\n   * Encoded as an 8 byte (64-bit) integer UTC timestamp from as the number\n   * of milliseconds since the Unix Epoch (January 1, 1970, 00:00:00 UTC).\n   *\n   * @see {Date}\n   */\n  Date,\n}\n\n/**\n * Mappings for the value types.\n */\nexport type ValueTypes = {\n  // Floats\n  [Type.Float16]: number;\n  [Type.Float32]: number;\n  [Type.Float64]: number;\n  // Integers\n  [Type.Int]: number;\n  [Type.Int8]: number;\n  [Type.Int16]: number;\n  [Type.Int32]: number;\n  [Type.UInt]: number;\n  [Type.UInt8]: number;\n  [Type.UInt16]: number;\n  [Type.UInt32]: number;\n  // Scalar\n  [Type.UScalar]: number;\n  [Type.Scalar]: number;\n  // Boolean\n  [Type.Bool]: boolean;\n  [Type.Bools]: boolean[];\n  // Other\n  [Type.String]: string;\n  [Type.Date]: Date;\n  [Type.RegExp]: RegExp;\n  [Type.JSON]: any;\n  [Type.Buffer]: Uint8Array | ArrayBuffer | ArrayBufferView;\n};\n\n/** @throws any error too */\nexport type ValidationFn<T> = (x: T) => undefined | boolean | Error;\nexport type TransformFn<T> = (x: T) => T;\nexport type Transforms<T> = TransformFn<T> | [preEncode: TransformFn<T>] | [preEncode: TransformFn<T> | undefined, postDecode: TransformFn<T> | undefined];\n\n/**\n * A wrapper around any Type definition that declares it as optional.\n */\nexport class OptionalType<T extends FieldDefinition> {\n  public constructor(public type: T) {}\n}\n\n/**\n * Wrap any definition as optional.\n */\nexport function optional<T extends FieldDefinition>(t: T): OptionalType<T> {\n  return new OptionalType(t);\n}\n\n/**\n * A definition for an object binary encoder.\n */\nexport type EncoderDefinition = {\n  [key: string]: FieldDefinition | OptionalType<FieldDefinition>;\n};\n\n/**\n * Definition for an object-field binary encoder.\n */\nexport type FieldDefinition = keyof ValueTypes | [keyof ValueTypes] | EncoderDefinition | [EncoderDefinition] | OptionalType<FieldDefinition>;\n\n/**\n * The resulting type of the decoded data, based on the encoder definition.\n */\nexport type InferredDecodedType<EncoderType extends EncoderDefinition> = {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends OptionalType<any> ? never : EKey]: EncoderType[EKey] extends keyof ValueTypes\n      ? ValueTypes[EncoderType[EKey]]\n      : EncoderType[EKey] extends [keyof ValueTypes]\n        ? Array<ValueTypes[EncoderType[EKey][0]]>\n        : EncoderType[EKey] extends EncoderDefinition\n          ? InferredDecodedType<EncoderType[EKey]>\n          : EncoderType[EKey] extends [EncoderDefinition]\n            ? Array<InferredDecodedType<EncoderType[EKey][number]>>\n            : never;\n} & {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends OptionalType<any> ? EKey : never]?: EncoderType[EKey] extends OptionalType<infer OptionalValue extends keyof ValueTypes>\n    ? ValueTypes[OptionalValue] | undefined\n    : EncoderType[EKey] extends OptionalType<infer OptionalValue extends [keyof ValueTypes]>\n      ? Array<ValueTypes[OptionalValue[0]]> | undefined\n      : EncoderType[EKey] extends OptionalType<infer OptionalValue extends EncoderDefinition>\n        ? InferredDecodedType<OptionalValue> | undefined\n        : never;\n};\n\nexport type InferredTransformConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? Transforms<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? Transforms<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredTransformConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredTransformConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends OptionalType<infer OptionalValue extends keyof ValueTypes>\n            ? Transforms<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends OptionalType<infer OptionalValue extends [keyof ValueTypes]>\n              ? Transforms<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends OptionalType<infer OptionalValue extends EncoderDefinition>\n                ? InferredTransformConfig<OptionalValue> | undefined\n                : never;\n};\n\nexport type InferredValidationConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? ValidationFn<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? ValidationFn<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredValidationConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredValidationConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends OptionalType<infer OptionalValue extends keyof ValueTypes>\n            ? ValidationFn<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends OptionalType<infer OptionalValue extends [keyof ValueTypes]>\n              ? ValidationFn<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends OptionalType<infer OptionalValue extends EncoderDefinition>\n                ? InferredValidationConfig<OptionalValue> | undefined\n                : never;\n};\n","import { CODERS } from './lib/coders';\nimport * as coders from './lib/coders';\nimport { $hashCode, $strToHashCode } from './lib/hashCode';\nimport { peekHeader, peekHeaderStr } from './lib/peek';\nimport { BufferWriter } from './lib/BufferWriter';\nimport { BufferReader } from './lib/BufferReader';\nimport {\n  InferredDecodedType,\n  EncoderDefinition,\n  Type,\n  OptionalType,\n  InferredTransformConfig,\n  InferredValidationConfig,\n  ValidationFn,\n  Transforms,\n  FieldDefinition\n} from './Type';\nimport { EncodeError } from './lib/errors';\nimport { cfg } from './config';\n\nexport type FormatHeader = string | number;\n\n/**\n * Decoded object types for a given binary format.\n * @example let onData = (data: Decoded<typeof MyBufferFormat>) => {...};\n */\nexport type Decoded<FromBufferFormat> = FromBufferFormat extends BufferFormat<infer EncoderType, any> ? InferredDecodedType<EncoderType> : never;\n\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(def: T): BufferFormat<T, HeaderType>;\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(h: HeaderType | null, def: T): BufferFormat<T, HeaderType>;\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(a?: HeaderType | T, b?: T): BufferFormat<T, HeaderType> {\n  return a !== null && typeof a === 'object'\n    ? new BufferFormat<T, HeaderType>(a as T)\n    : new BufferFormat<T, HeaderType>(b as T, a as HeaderType);\n}\n\nfunction isValidHeader(h: FormatHeader): boolean {\n  if (typeof h === 'number') return Number.isInteger(h) && h >= 0 && h <= 65_535;\n  if (typeof h === 'string') return new TextEncoder().encode(h).byteLength === 2;\n  return false;\n}\n\n/**\n * BufferFormat is a utility class for encoding and decoding binary data based\n * on a provided encoding format.\n *\n * @see {header}\n * @see {encode(data)}\n * @see {decode(binary)}\n */\nexport class BufferFormat<EncoderType extends EncoderDefinition, HeaderType extends FormatHeader = number> {\n  /** @internal */\n  private static _$globalEncodingBuffer?: ArrayBuffer;\n\n  /**\n   * A unique identifier encoded as the first 2 bytes (or `undefined` if headerless).\n   *\n   * @see {peekHeader(...)}\n   * @see {peekHeaderStr(...)}\n   */\n  public readonly header!: HeaderType;\n\n  /** @internal */\n  private readonly _$header!: number; // always uint16 vesion\n  /** @internal */\n  private readonly _$type!: Type;\n  /** @internal */\n  private readonly _$fields!: Field[];\n  /** @internal */\n  private readonly _$fieldsMap!: Map<string, Field>;\n\n  /** @internal */\n  private _$format?: string;\n  /** @internal */\n  private _$transforms?: Transforms<any> | undefined;\n  /** @internal */\n  private _$validate?: ValidationFn<any> | undefined;\n  /** @internal */\n  private _$hasValidationOrTransforms = false;\n  /** @internal */\n  private _$writer?: BufferWriter;\n\n  public constructor(\n    def: EncoderType,\n    header?: HeaderType | null,\n  ) {\n    // set definition\n    if (def instanceof OptionalType) {\n      throw new TypeError(\"Invalid encoding format: Root object cannot be optional.\");\n    }\n    else if (def !== undefined && typeof def === 'number') {\n      this._$type = def;\n    }\n    else if (def instanceof Object) {\n      this._$type = undefined; // object\n      this._$fieldsMap = new Map();\n      this._$fields = Object.keys(def).map((name) => {\n        const f = new Field(name, def[name]);\n        this._$fieldsMap.set(name, f);\n        return f;\n      });\n\n      // set headers\n      if (header === undefined) {\n        this.header = $hashCode(this.f) as HeaderType; // automatic\n        this._$header = this.header as number;\n      }\n      else if (header === null) {\n        this.header = undefined; // headerless\n        this._$header = undefined;\n      }\n      else if (isValidHeader(header)) {\n        this.header = header; // manual\n        this._$header = typeof header === 'number' ? header : $strToHashCode(header);\n      }\n      else {\n        throw new TypeError(`Header should be an integer between 0 and 65535, a 2-byte string, or null. Received: ${header}`);\n      }\n    }\n    else {\n      throw new TypeError(\"Invalid encoding format: Must be an object, or a known coder type.\");\n    }\n  }\n\n  // ----- Static methods: -----\n\n  /**\n   * Read the header of a buffer as a number.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeader = peekHeader;\n\n  /**\n   * Read the header of a buffer as a string.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeaderStr = peekHeaderStr;\n\n  // ----- Accessors: -----\n\n  /**\n   * @example \"{uint8,str[]?}\"\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private get f(): string {\n    if (this._$format === undefined) {\n      this._$format = this._$fields !== undefined\n        ? `{${this._$fields.map(v => v.f).join(',')}}`\n        : `${this._$type}`;\n    }\n\n    return this._$format;\n  }\n\n  /** @internal */\n  private static _$initWriter(): BufferWriter {\n    if (cfg.useGlobalEncodingBuffer) {\n      if (!BufferFormat._$globalEncodingBuffer) {\n        // lazy init: global encoding buffer created at max size\n        BufferFormat._$globalEncodingBuffer = new ArrayBuffer(cfg.encodingBufferMaxSize);\n      }\n\n      return new BufferWriter(BufferFormat._$globalEncodingBuffer);\n    }\n\n    return new BufferWriter(cfg.encodingBufferInitialSize);\n  }\n\n  /**\n   * Encode an object to bytes.\n   *\n   * **Warning:** Returns an unsafe view into the encoding buffer. Pass this reference to preserve\n   * performance, and to minimize memory allocation and fragmentation.\n   *\n   * @param data - data to encode\n   * @param safe - (default: `setTinybufConfig().safe`) safely copy bytes, instead of returning a pointer to the encoded buffer\n   *\n   * @returns An Uint8Array view of the encoded bytes\n   * @throws if fails to encode value to schema\n   */\n  public encode<DecodedType extends InferredDecodedType<EncoderType>>(\n    data: DecodedType,\n    safe?: boolean,\n  ): Uint8Array {\n    // lazy init\n    if (!this._$writer) this._$writer = BufferFormat._$initWriter();\n    this._$writer.$byteOffset = 0; // reset\n    if (this._$hasValidationOrTransforms) data = this._$preprocess(data);\n    this._$write(data, this._$writer);\n\n    if (safe ?? cfg.safe) {\n      return this._$writer.$asCopy();\n    }\n\n    return this._$writer.$asView();\n  }\n\n  /**\n   * Decode binary data to an object.\n   * @throws if fails to decode bytes to schema.\n   */\n  public decode<DecodedType = InferredDecodedType<EncoderType>>(b: Uint8Array | ArrayBufferView | ArrayBuffer): DecodedType {\n    return this._$read(new BufferReader(b, this.header === undefined ? 0 : 2));\n  }\n\n  /**\n   * Set additional transform functions to apply before encoding and after decoding.\n   */\n  public setTransforms(transforms: InferredTransformConfig<EncoderType> | Transforms<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (transforms instanceof Function || (Array.isArray(transforms) && transforms[0] instanceof Function)) {\n      this._$transforms = transforms;\n    }\n    else {\n      for (const name of Object.keys(transforms)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set transforms for field '${name}'`);\n        }\n\n        // Set validation for object.\n        field.$coder.setTransforms(transforms[name]);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Set additional validation rules which are applied on encode() and decode().\n   *\n   * - Validation functions should throw an error, return an error, or return boolean false.\n   * - Anything else is treated as successfully passing validation.\n   */\n  public setValidation(validations: InferredValidationConfig<EncoderType> | ValidationFn<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (validations instanceof Function) {\n      this._$validate = validations;\n    }\n    else {\n      for (const name of Object.keys(validations)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set validation function for field '${name}'`);\n        }\n\n        field.$coder.setValidation(validations[name]);\n      }\n    }\n\n    return this;\n  }\n\n  // ----- Implementation: -----\n\n  /**\n   * @param value\n   * @param bw\n   * @throws if the value is invalid\n   *\n   * @internal\n   */\n  private _$write(value: { [x: string]: any; }, bw: BufferWriter): void {\n    // write header\n    if (this._$header !== undefined) this._$writer.$writeUInt16(this._$header);\n\n    // write scalar\n    if (this._$type !== undefined) {\n      const safeValue = (this._$validate || this._$transforms) ? this._$preprocess(value) : value;\n\n      return CODERS[this._$type].$write(safeValue, bw);\n    }\n\n    // check for object type\n    if (!value || typeof value !== 'object') {\n      throw new TypeError(`expected object type`);\n    }\n\n    // write each field\n    for (const field of this._$fields) {\n      const subValue = value[field.$name];\n\n      if (field.$isOptional) {\n\n        // add 'presence' flag\n        if (subValue === undefined || subValue === null) {\n          coders.boolCoder.$write(false, bw);\n          continue;\n        }\n        else {\n          coders.boolCoder.$write(true, bw);\n        }\n      }\n\n      if (!field.$isArray) {\n        // scalar field\n        field.$coder._$write(subValue, bw);\n        continue;\n      }\n\n      // Array field\n      this._$writeArray(subValue, bw, field.$coder);\n    }\n  }\n\n  /**\n   * pre-process: validation and/or transforms\n   * @internal\n   */\n  private _$preprocess<T extends Record<string, any>>(data: T): T {\n    if (this._$validate && this._$validate(data) === false) {\n      throw new Error('failed validation');\n    }\n\n    if (this._$transforms instanceof Function) {\n      return this._$transforms(data);\n    }\n    else if (Array.isArray(this._$transforms) && this._$transforms[0] instanceof Function) {\n      return this._$transforms[0](data);\n    }\n\n    return data;\n  }\n\n  /**\n   * post-process: validation and/or transforms\n   * @internal\n   */\n  private _$postprocess<T extends Record<string, any>>(data: T): T {\n    if (Array.isArray(this._$transforms) && this._$transforms[1] instanceof Function) {\n      data = this._$transforms[1](data);\n    }\n\n    if (this._$validate instanceof Function) {\n      this._$validate(data);\n    }\n\n    return data;\n  }\n\n  /**\n   * This function will be executed only the first time\n   * After that, we'll compile the read routine and add it directly to the instance\n   * @param state\n   * @returns\n   * @throws if fails\n   *\n   * @internal\n   */\n  private _$read<DecodedType = InferredDecodedType<EncoderType>>(state: BufferReader): DecodedType {\n    // This function will be executed only the first time to compile the read routine.\n    // After that, we'll compile the read routine and add it directly to the instance\n\n    // Update the read method implementation.\n    this._$read = this._$compileFormatReadFn();\n\n    return this._$read(state);\n  }\n\n  /**\n   * Generate read function code for this coder.\n   *\n   * @example\n   * // new Type({a:'int', 'b?':['string']}) would emit:\n   *\n   * `return {\n   *   a: this._readField(0, state),\n   *   b: this._readField(1, state),\n   * }`\n   *\n   * @internal\n   */\n  private _$makeObjectReader(): string {\n    const fieldsStr: string = this._$fields\n      .map(({ $name: name }, i) => `${name}:this.${this._$readField.name}(${i},state)`)\n      .join(',');\n\n    return `return{${fieldsStr}}`;\n  }\n\n  /**\n   * Read an individual field.\n   * @internal\n   */\n  private _$readField(fieldId: number, state: BufferReader): any {\n    const field = this._$fields[fieldId];\n\n    if (field.$isOptional && !this._$readOptional(state)) {\n      return undefined;\n    }\n\n    if (field.$isArray) {\n      return this._$readArray(field.$coder, state);\n    }\n\n    return field.$coder._$read(state);\n  }\n\n  /**\n   * Compile the decode() method for this object.\n   *\n   * @internal\n   */\n  private _$compileFormatReadFn<DecodedType = InferredDecodedType<EncoderType>>(): (state: BufferReader) => DecodedType {\n    // scalar type\n    if (this._$type !== undefined) {\n      return this._$hasValidationOrTransforms\n        ? (s) => this._$postprocess(CODERS[this._$type].$read(s))\n        : CODERS[this._$type].$read;\n    }\n\n    // scalar type\n    return new Function('state', this._$makeObjectReader()) as any;\n  }\n\n  /**\n   * @param value\n   * @param data\n   * @param path\n   * @param type\n   * @throws if the value is invalid\n   *\n   * @internal\n   */\n  private _$writeArray(value: string | any[], data: any, type: BufferFormat<any, any>): void {\n    if (!Array.isArray(value)) {\n      throw new EncodeError(`Array<${type._$type}>`, data);\n    }\n\n    let i: string | number, len: number;\n    len = value.length;\n    coders.uintCoder.$write(len, data);\n    for (i = 0; i < len; i++) {\n      type._$write(value[i], data);\n    }\n  }\n\n  /**\n   * @throws if invalid data\n   *\n   * @internal\n   */\n  private _$readArray<T extends EncoderDefinition>(type: BufferFormat<T, any>, state: any): Array<T> {\n    const arr = new Array(coders.uintCoder.$read(state));\n    for (let j = 0; j < arr.length; j++) {\n      arr[j] = type._$read(state);\n    }\n    return arr;\n  }\n\n  /** @internal */\n  private _$readOptional(state: BufferReader): boolean {\n    return coders.boolCoder.$read(state);\n  }\n}\n\n/**\n * Parses and represents an object field.\n *\n * @internal\n */\nclass Field {\n  public readonly $name: string;\n  public readonly $coder: BufferFormat<any>;\n  public readonly $isOptional: boolean;\n  public readonly $isArray: boolean;\n\n  private _$formatString?: string;\n\n  public constructor(name: string, rawType: FieldDefinition) {\n    this.$isOptional = rawType instanceof OptionalType;\n    let type = rawType instanceof OptionalType ? rawType.type : rawType;\n    this.$name = name;\n\n    if (Array.isArray(type)) {\n      if (type.length !== 1) {\n        throw new TypeError('Invalid array definition, it must have exactly one element');\n      }\n\n      type = type[0];\n      this.$isArray = true;\n    }\n    else {\n      this.$isArray = false;\n    }\n\n    this.$coder = new BufferFormat<any>(type, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public get f(): string {\n    if (this._$formatString === undefined) {\n      this._$formatString = `${(this.$coder as any).f}${this.$isArray ? '[]' : ''}${this.$isOptional ? '?' : ''}`;\n    }\n\n    return this._$formatString;\n  }\n}\n"],"names":["TinybufError","Error","EncodeError","constructor","a","b","super","DecodeError","summary","cause","message","this","stack","$hashCode","str","hash","i","length","charCodeAt","$strToHashCode","$hashCodeToStr","hashCode","String","fromCharCode","Math","floor","peekHeader","DataView","ArrayBuffer","buffer","getUint16","peekHeaderStr","bufferParser","BufferParser","_$formats","Map","processBuffer","f","data","cb","header","has","get","decode","e","on","format","callback","overwritePrevious","set","ignore","forEach","clear","$floor","$ceil","ceil","$clamp","value","min","max","$roundTowardZero","x","$roundAwayFromZero","uscalround","$fromuscal8","$touscal8","scalround","$fromscal8","$toscal8","mask","slice","reduce","n","unmask","len","clz32","result","Array","encoder","TextEncoder","decoder","TextDecoder","MAX_VARINT32","POW_32","uintCoder","$write","writer","$writeUInt8","$writeUInt16","$writeUInt32","$read","reader","firstByte","$peek","$readUint32","$readUint16","$skip","intCoder","intValue","dateCoder","getTime","Date","stringCoder","bufferCoder","encode","$utf8decode","y","byteLength","$writeBuffer","$readBuffer","boolCoder","$readUint8","boolsCoder","jsonCoder","JSON","stringify","parse","regexCoder","global","ignoreCase","multiline","source","g","m","RegExp","CODERS","$writeInt8","$readInt8","$writeInt16","$readInt16","$writeInt32","$readInt32","$writeFloat64","$readFloat64","$writeFloat32","$readFloat32","$writeFloat16","$readFloat16","setTinybufConfig","c","cfg","Object","assign","safe","useGlobalEncodingBuffer","encodingBufferMaxSize","encodingBufferInitialSize","encodingBufferIncrement","f16round","$fromf16","$tof16","Float32Array","Int32Array","s","z","Float64Array","from","_","pow","Infinity","NaN","BufferWriter","$byteOffset","_$buf","_$autoResize","_$dataView","$asView","Uint8Array","$asCopy","setInt8","_$alloc","setInt16","setInt32","setUint8","setUint16","setUint32","setFloat32","setFloat64","byteOffset","readView","bytes","currentAlloc","minRequestedSize","newLength","newBuffer","currentData","BufferReader","getUint8","r","getUint32","getInt8","getInt16","getInt32","getFloat32","getFloat64","RangeError","view","OptionalType","type","optional","t","defineFormat","BufferFormat","def","_$hasValidationOrTransforms","TypeError","undefined","_$type","_$fieldsMap","_$fields","keys","map","name","Field","_$header","isValidHeader","h","Number","isInteger","_$format","v","join","_$initWriter","_$globalEncodingBuffer","_$writer","_$preprocess","_$write","_$read","setTransforms","transforms","Function","isArray","_$transforms","field","$coder","setValidation","validations","_$validate","bw","safeValue","subValue","$name","$isOptional","coders.boolCoder","$isArray","_$writeArray","_$postprocess","state","_$compileFormatReadFn","_$makeObjectReader","_$readField","fieldId","_$readOptional","_$readArray","coders.uintCoder","arr","j","rawType","_$formatString"],"mappings":"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"}