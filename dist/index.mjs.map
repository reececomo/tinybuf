{"version":3,"file":"index.mjs","sources":["../src/core/lib/errors.ts","../src/core/lib/hashCode.ts","../src/core/lib/peek.ts","../src/core/BufferParser.ts","../src/core/lib/math.ts","../src/core/lib/scalar.ts","../src/core/lib/bitmask.ts","../src/core/lib/utf8.ts","../src/core/lib/float16.ts","../src/core/lib/bfloat16.ts","../src/core/lib/coders.ts","../src/core/config.ts","../src/core/lib/BufferWriter.ts","../src/core/lib/BufferReader.ts","../src/core/Type.ts","../src/core/BufferFormat.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unified-signatures */\n\nexport class TinybufError extends Error {}\n","/**\n * DJB2 hash algorithm (modified for 16-bit uints).\n *\n * DJB2 is a simple and widely used non-cryptographic\n * hash function created by Daniel J. Bernstein.\n *\n * @returns 16-bit unsigned integer\n */\nexport function $hashCode(str: string): number {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return hash & 0xFFFF; // Ensure the result is a Uint16\n}\n\n/**\n * Returns an unsigned 16-bit integer hashcode for some string.\n * Prefers 2 character string.\n *\n * @returns A UInt16 between 0 and 65535 (inclusive).\n */\nexport function $strToHashCode(str: string): number {\n  if (str.length !== 2) return $hashCode(str);\n  return str.charCodeAt(0) * 256 + str.charCodeAt(1);\n}\n\n/**\n * Convert a UInt16 hashcode to a 2-byte string.\n */\nexport function $hashCodeToStr(hashCode: number): string {\n  return String.fromCharCode(Math.floor(hashCode / 256)) + String.fromCharCode(hashCode % 256);\n}\n","import { $hashCodeToStr } from \"./hashCode\";\n\n\n/**\n * Read the header bytes of a buffer as a number.\n *\n * @throws {RangeError} if buffer size < 2\n */\nexport function peekHeader(b: ArrayBuffer | ArrayBufferView): number {\n  return (ArrayBuffer.isView(b) ? new DataView(b.buffer, b.byteOffset, 2) : new DataView(b, 0, 2)).getUint16(0, false);\n}\n\n/**\n * Read the header bytes of a buffer as a string.\n *\n * @throws {RangeError} if buffer length < 2\n */\nexport function peekHeaderStr(b: ArrayBuffer | ArrayBufferView): string {\n  return $hashCodeToStr(peekHeader(b));\n}\n","import { BufferFormat } from \"./BufferFormat\";\nimport { EncoderDefinition, InferredDecodedType } from \"./Type\";\nimport { TinybufError } from \"./lib/errors\";\nimport { $hashCodeToStr, $strToHashCode } from \"./lib/hashCode\";\nimport { peekHeader } from \"./lib/peek\";\n\ntype AnyFormat = BufferFormat<any, any>;\ntype Uint16FormatHeader = number;\n\n/**\n * Small utility for registering and processing format handlers.\n *\n * @example\n * const myHandler = bufferParser()\n *   .on(FormatA, aData => {})\n *   .on(FormatB, bData => {});\n *\n * myHandler.processBuffer(bytes);\n */\nexport const bufferParser = (): BufferParser => new BufferParser();\n\nexport class BufferParser {\n  /** @internal */\n  private _$formats = new Map<Uint16FormatHeader, [format: AnyFormat, handler: (data: any) => any, decodeInPlace: boolean]>();\n  private _$data = new Map<Uint16FormatHeader, any>(); // used when decoding in-place\n\n  /**\n   * Decode an array buffer and trigger the relevant data handler.\n   *\n   * When passed an ArrayBufferView, accesses the underlying 'buffer' instance directly.\n   *\n   * @throws {TinybufError} if fails to decode, or no handler is registered\n   */\n  public processBuffer(b: ArrayBuffer | ArrayBufferView): void {\n    let f: any, data: any, cb: (data: any) => any, r: boolean;\n\n    try {\n      const header = peekHeader(b);\n\n      if (!this._$formats.has(header)) {\n        throw new TinybufError(`Unknown format: ${header} '${$hashCodeToStr(header)}')`);\n      }\n\n      [f, cb, r] = this._$formats.get(header);\n      if (r) data = this._$data.get(header) ?? {};\n      data = f.decode(b, data);\n      if (r) this._$data.set(header, data);\n    }\n    catch (e) {\n      const err = new TinybufError(`Failed to decode: ${e}`);\n      err.stack = e.stack;\n\n      throw err;\n    }\n\n    cb(data);\n  }\n\n  /**\n   * Register a format handler.\n   */\n  public on<EncoderType extends EncoderDefinition, DecodedType = InferredDecodedType<EncoderType>>(\n    format: BufferFormat<EncoderType, string | number>,\n    callback: (data: DecodedType) => any,\n    {\n      decodeInPlace = false,\n    } = {},\n  ): this {\n    if (format.header == null) {\n      throw new TinybufError('Format requires header');\n    }\n\n    const header = typeof format.header === 'string' ? $strToHashCode(format.header) : format.header;\n\n    if (this._$formats.has(header) && this._$formats.get(header)?.[0] !== format) {\n      throw new TinybufError(`Format header collision: ${format.header}`);\n    }\n\n    this._$formats.set(header, [format, callback, decodeInPlace]);\n\n    return this;\n  }\n\n  /** Register a format (or formats) that are recognized. */\n  public ignore(...format: AnyFormat[]): this {\n    format.forEach(f => this.on(f, () => {}));\n    return this;\n  }\n\n  /** Clears all registered formats and handlers. */\n  public clear(): void {\n    this._$formats.clear();\n    this._$data.clear();\n  }\n}\n","export const $floor = Math.floor,\n  $ceil = Math.ceil;\n\n/** Clamp a number to a range. */\nexport const $clamp = (value: number, min: number, max: number): number =>\n  value > max ? max : value < min ? min : value;\n\n/** Round toward zero */\nexport const $roundTowardZero = (x: number): number => x < 0 ? $ceil(x) : $floor(x);\n\n/** Round away zero */\nexport const $roundAwayFromZero = (x: number): number =>\n  x < 0 ? $floor(x) : $ceil(x);\n","import { $clamp, $roundTowardZero, $roundAwayFromZero } from \"./math\";\n\n/**\n * Quantize a number to an 8-bit scalar between 0.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function uscalround(x: number): number {\n  return $fromuscal8($touscal8(x));\n}\n\n/**\n * Quantize a number to an 8-bit signed scalar between -1.0 and 1.0.\n *\n * @returns A number (double) in its closest signed scalar representation.\n */\nexport function scalround(x: number): number {\n  return $fromscal8($toscal8(x));\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $touscal8(x: number): number {\n  return $clamp(127 + $roundTowardZero(x * 254 - 127), 0, 254);\n}\n\n/** @returns A UInt8 bitmask representation. */\nexport function $toscal8(x: number): number {\n  return $clamp($roundTowardZero(x * 127), -127, 127) + 127;\n}\n\n/** @returns An unsigned scalar between 0.0 and 1.0. */\nexport function $fromuscal8(x: number): number {\n  // Make symmetric: (0.5 + round((uint8 - 127) / 254 * 100)) / 100\n  return $clamp(($roundAwayFromZero((x - 127) * 0.3937007874015748) + 50) * 0.01, 0, 1);\n}\n\n/** @returns A signed scalar between -1.0 and 1.0. */\nexport function $fromscal8(x: number): number {\n  // Make symmetric: round((uint8 - 127) / 127 * 100) / 100\n  return $clamp($roundAwayFromZero((x - 127) * 0.787401574803149) * 0.01, -1, 1);\n}\n","/**\n * Mask booleans to a uint32.\n *\n * @param x - A boolean array.\n * @param padBit - A bit to pad the mask (for variable length data).\n */\nexport const mask = (x: boolean[], padBit: 0 | 1 = 0b1): number => {\n  return x.reduce((n, b: any) => (n << 1) | b, padBit);\n};\n\n/**\n * Unmask booleans from a uint32.\n *\n * @param x - A uint32 number.\n * @param l - number of booleans to expect (default: infer lenth from x where x is encoded with a pad bit)\n * or pass an existing boolean array to decode in-place.\n */\nexport const unmask = (x: number, l?: number | boolean[]): boolean[] => {\n  const len = l === undefined ? 31 - Math.clz32(x) : Array.isArray(l) ? l.length : l;\n  const val = Array.isArray(l) && l.length === len ? l : new Array<boolean>(len);\n  for (let i = 0; i < len; i++) val[i] = !!(x & (1 << (len - 1 - i)));\n  return val;\n};\n","export const $utf8encode = (function () {\n  const encoder = new TextEncoder();\n  return (x?: string): Uint8Array => encoder.encode(x);\n})();\n\nexport const $utf8decode = (function () {\n  const decoder = new TextDecoder('utf-8');\n  return (y: Uint8Array): string => decoder.decode(y);\n})();\n","/**\n * Returns the nearest half precision float representation of a number.\n * @param x A numeric expression.\n */\nexport function f16round(x: number): number {\n  return $fromf16($tof16(x));\n}\n\n/**\n * Returns the nearest half precision float representation of a number as a 16-bit bitmask.\n */\nexport const $tof16 = (function() {\n  const x = new Float32Array(1);\n  const y = new Int32Array(x.buffer);\n\n  return function (f: number) {\n    x[0] = f;\n    let i = y[0]; // 32-bit int\n    let s = (i >> 16) & 0X8000; // sign\n    let z = (i & 0X7FFFFFFF) + 0X1000 | 0;\n\n    if (z >= 0X47800000) {\n      if ((i & 0X7FFFFFFF) < 0X47800000) return s | 0X7BFF;\n      if (z < 0X7F800000) return s | 0X7C00;\n      return s | 0X7C00 | (i & 0X007FFFFF) >> 13;\n    }\n    if (z >= 0X38800000) return s | z - 0X38000000 >> 13;\n    else if (z < 0X33000000) return s;\n    z = (i & 0X7FFFFFFF) >> 23;\n    return s | ((i & 0X7FFFFF | 0X800000)\n      + (0X800000 >>> z - 102)\n      >> 126 - z);\n  };\n}());\n\n/**\n * Returns the nearest half precision float value for a 16-bit bitmask.\n */\nexport const $fromf16 = (function() {\n  const z = Math.pow(2, -24); // subnormal constant\n  const d = new Float32Array(32 + 1024);\n  for (let e = 0; e < 32; e++) d[e] = Math.pow(2, e - 15); // biased exponents\n  for (let m = 0; m < 1024; m++) d[m + 0x20] = 1 + m / 1024; // normalized offset mantissas\n\n  return function (b: number): number {\n    const s = (b & 32768) === 32768 ? -1 : 1; // sign: 1 bit\n    const e = b & 31744; // exponent: 5 bits\n    const m = b & 1023; // mantissa: 10 bits\n\n    if (e === 0) return m === 0 ? s * 0 : s * z;\n    if (e === 31744) return m === 0 ? s * Infinity : NaN;\n    return d[e >> 10] * d[m + 0x20] * s;\n  };\n}());\n","const i = new Uint32Array(1);\nconst f = new Float32Array(i.buffer);\n\n/**\n * Returns the nearest bfloat16 representation of a number.\n * @param x A numeric expression.\n */\nexport function bf16round(x: number): number {\n  f[0] = x;\n  i[0] = i[0] & 0xFFFF0000;\n  return f[0];\n}\n\n/** Returns a 16-bit bfloat16 bitmask for a given float. */\nexport function $tobf16(x: number): number {\n  f[0] = x;\n  return i[0] >>> 16;\n}\n\n/** Returns the nearest value from a 16-bit bfloat16 bitmask. */\nexport function $frombf16(x: number): number {\n  i[0] = x << 16;\n  return f[0];\n}\n","import { BufferWriter } from './BufferWriter';\nimport { BufferReader } from './BufferReader';\nimport {\n  $fromuscal8,\n  $fromscal8,\n  $touscal8,\n  $toscal8\n} from './scalar';\nimport { Type } from '../Type';\nimport { mask, unmask } from './bitmask';\nimport { $utf8decode, $utf8encode } from './utf8';\nimport { $floor } from './math';\nimport { $fromf16, $tof16 } from './float16';\nimport { $frombf16, $tobf16 } from './bfloat16';\n\n// Pre-calculated constants\nconst MAX_VARUINT8 = 128,\n  MAX_VARUINT16 = 16_384,\n  MAX_VARUINT32 = 536_870_912,\n  MAX_VARINT8 = 64,\n  MAX_VARINT16 = 8_192,\n  MAX_VARINT32 = 268_435_456,\n  POW_32 = 0x100000000;\n\ntype WriterFn<W> = (value: W, writer: BufferWriter) => void;\ntype ReaderFn<R> = (reader: BufferReader, overwrite?: Partial<R>) => R;\n\nexport interface BinaryTypeCoder<W, R = W> {\n  $write: WriterFn<W>;\n  $read: ReaderFn<R>;\n}\n\n/**\n * Format (big-endian):\n * 7b   0xxxxxxx\n * 14b  10xxxxxx xxxxxxxx\n * 29b  110xxxxx xxxxxxxx xxxxxxxx xxxxxxxx\n * 61b  111xxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx\n */\nexport const uintCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (typeof value !== 'number') value = Number(value);\n    if (value < 0) value = 0;\n    if (value < MAX_VARUINT8) writer.$writeUint8(value);\n    else if (value < MAX_VARUINT16) writer.$writeUint16(value + 0x8000);\n    else if (value < MAX_VARUINT32) writer.$writeUint32(value + 0xc0000000);\n    else if (value >= MAX_VARUINT32) {\n      writer.$writeUint32($floor(value / POW_32) + 0xe0000000);\n      writer.$writeUint32(value >>> 0);\n    }\n    else {\n      // coercion case\n      writer.$writeUint8(value as any === true ? 1 : 0);\n    }\n  },\n  $read: (reader) => {\n    const firstByte = reader.$peek();\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      return reader.$readUint16() - 0x8000;\n    }\n    else if (!(firstByte & 0x20)) {\n      return reader.$readUint32() - 0xc0000000;\n    }\n\n    return (reader.$readUint32() - 0xe0000000) * POW_32\n      + reader.$readUint32();\n  }\n};\n\nexport const uint8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8(value),\n  $read: (reader) => reader.$readUint8(),\n};\n\nexport const uint16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint16(value),\n  $read: (reader) => reader.$readUint16(),\n};\n\nexport const uint32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint32(value),\n  $read: (reader) => reader.$readUint32(),\n};\n\n/**\n * Format (big-endian):\n * 7b   0xxxxxxx\n * 14b  10xxxxxx xxxxxxxx\n * 29b  110xxxxx xxxxxxxx xxxxxxxx xxxxxxxx\n * 61b  111xxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx\n */\nexport const intCoder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => {\n    if (typeof value !== 'number') value = Number(value);\n    if (value >= -MAX_VARINT8 && value < MAX_VARINT8) writer.$writeUint8(value & 0x7f);\n    else if (value >= -MAX_VARINT16 && value < MAX_VARINT16) writer.$writeUint16((value & 0x3fff) + 0x8000);\n    else if (value >= -MAX_VARINT32 && value < MAX_VARINT32) writer.$writeUint32((value & 0x1fffffff) + 0xc0000000);\n    else if (value < -MAX_VARINT32 || value >= MAX_VARINT32) {\n      // Split in two 32b uints\n      writer.$writeUint32(($floor(value / POW_32) & 0x1fffffff) + 0xe0000000);\n      writer.$writeUint32(value >>> 0);\n    }\n    else {\n      // coercion case\n      writer.$writeUint8(value as any === true ? 0x7f : 0);\n    }\n  },\n  $read: (reader) => {\n    let firstByte = reader.$peek(), i: number;\n\n    if (!(firstByte & 0x80)) {\n      reader.$skip();\n      return (firstByte & 0x40) ? (firstByte | 0xffffff80) : firstByte;\n    }\n    else if (!(firstByte & 0x40)) {\n      i = reader.$readUint16() - 0x8000;\n      return (i & 0x2000) ? (i | 0xffffc000) : i;\n    }\n    else if (!(firstByte & 0x20)) {\n      i = reader.$readUint32() - 0xc0000000;\n      return (i & 0x10000000) ? (i | 0xe0000000) : i;\n    }\n    else {\n      i = reader.$readUint32() - 0xe0000000;\n      i = (i & 0x10000000) ? (i | 0xe0000000) : i;\n      return i * POW_32 + reader.$readUint32();\n    }\n  }\n};\n\nexport const int8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt8(value),\n  $read: (reader) => reader.$readInt8(),\n};\n\nexport const int16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt16(value),\n  $read: (reader) => reader.$readInt16(),\n};\n\nexport const int32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeInt32(value),\n  $read: (reader) => reader.$readInt32(),\n};\n\nexport const bfloat16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint16($tobf16(value)),\n  $read: (reader) => $frombf16(reader.$readUint16()),\n};\n\nexport const float16Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint16($tof16(value)),\n  $read: (reader) => $fromf16(reader.$readUint16()),\n};\n\nexport const float32Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat32(value),\n  $read: (reader) => reader.$readFloat32(),\n};\n\nexport const float64Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeFloat64(value),\n  $read: (reader) => reader.$readFloat64(),\n};\n\nexport const uscalar8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8($touscal8(value)),\n  $read: (reader) => $fromuscal8(reader.$readUint8()),\n};\n\nexport const scalar8Coder: BinaryTypeCoder<number> = {\n  $write: (value, writer) => writer.$writeUint8($toscal8(value)),\n  $read: (reader) => $fromscal8(reader.$readUint8()),\n};\n\nexport const dateCoder: BinaryTypeCoder<Date> = {\n  $write: (value, writer) => intCoder.$write(value.getTime(), writer),\n  $read: (reader) => new Date(intCoder.$read(reader)),\n};\n\nexport const bufferCoder: BinaryTypeCoder<ArrayBuffer | ArrayBufferView, Uint8Array> = {\n  $write: (value, writer) => {\n    uintCoder.$write(value.byteLength, writer); // prefix length\n    writer.$writeBytes(value);\n  },\n  $read: (reader) => reader.$readBytes(uintCoder.$read(reader)),\n};\n\nexport const stringCoder: BinaryTypeCoder<string> = {\n  $write: (value, writer) => bufferCoder.$write($utf8encode(value), writer),\n  $read: (reader) => $utf8decode(bufferCoder.$read(reader)),\n};\n\nexport const boolCoder: BinaryTypeCoder<boolean> = {\n  $write: (value, writer) => writer.$writeUint8(value ? 1 : 0),\n  $read: (reader) => reader.$readUint8() !== 0,\n};\n\nexport const boolsCoder: BinaryTypeCoder<boolean[]> = {\n  $write: (value, writer) => {\n    if (value.length > 28) value = value.slice(0, 28); // drop additional\n    uintCoder.$write(mask(value), writer);\n  },\n  $read: (reader, p) => unmask(uintCoder.$read(reader), p),\n};\n\nexport const jsonCoder: BinaryTypeCoder<any> = {\n  $write: (value, writer) => stringCoder.$write(JSON.stringify(value), writer),\n  $read: (reader) => JSON.parse(stringCoder.$read(reader)),\n};\n\nexport const regexCoder: BinaryTypeCoder<RegExp> = {\n  $write: (value, writer) => {\n    writer.$writeUint8(mask([value.global, value.ignoreCase, value.multiline]));\n    stringCoder.$write(value.source, writer);\n  },\n  $read: (reader) => {\n    const [g, i, m] = unmask(reader.$readUint8());\n    return new RegExp(stringCoder.$read(reader), (g ? 'g' : '') + (i ? 'i' : '') + (m ? 'm' : ''));\n  }\n};\n\n/** @see {Type} indices must match */\nexport const writers: Record<Type, WriterFn<any>> = [\n  uintCoder.$write,\n  uint8Coder.$write,\n  uint16Coder.$write,\n  uint32Coder.$write,\n  intCoder.$write,\n  int8Coder.$write,\n  int16Coder.$write,\n  int32Coder.$write,\n  float64Coder.$write,\n  float32Coder.$write,\n  float16Coder.$write,\n  bfloat16Coder.$write,\n  scalar8Coder.$write,\n  uscalar8Coder.$write,\n  boolCoder.$write,\n  boolsCoder.$write,\n  bufferCoder.$write,\n  stringCoder.$write,\n  jsonCoder.$write,\n  regexCoder.$write,\n  dateCoder.$write,\n];\n\n/** @see {Type} indices must match */\n\nexport const readers: Record<Type, ReaderFn<any>> = [\n  uintCoder.$read,\n  uint8Coder.$read,\n  uint16Coder.$read,\n  uint32Coder.$read,\n  intCoder.$read,\n  int8Coder.$read,\n  int16Coder.$read,\n  int32Coder.$read,\n  float64Coder.$read,\n  float32Coder.$read,\n  float16Coder.$read,\n  bfloat16Coder.$read,\n  scalar8Coder.$read,\n  uscalar8Coder.$read,\n  boolCoder.$read,\n  boolsCoder.$read,\n  bufferCoder.$read,\n  stringCoder.$read,\n  jsonCoder.$read,\n  regexCoder.$read,\n  dateCoder.$read,\n];\n","/** Default maximum transmission unit in networking */\nconst MTU = 1500;\n\n/** Set Tinybuf global config */\nexport const setTinybufConfig = (c: Partial<TinybufConfig>): void => {\n  cfg = { ...cfg, ...c };\n};\n\nexport type TinybufConfig = {\n  /**\n   * (default: false)\n   *\n   * This sets the default value for `preserveBytes` on\n   * `encode(data, preserveBytes?)`.\n   *\n   * By default, `encode()` returns its encoded bytes as a `Uint8Array`\n   * view of the bytes in the shared encoding buffer.\n   *\n   * This is suitable for synchronous use (e.g. high-performance applications)\n   * as it avoids slow and expensive memory allocation and fragmentation on\n   * each call to `encode()`.\n   *\n   * However, susbsequent calls are destructive to the underlying bytes, so\n   * for asynchronous uses (e.g. Promises, Workers, long-lived storage), set\n   * `preserveBytes` to `true`.\n   */\n  safe: boolean,\n\n  /**\n   * (default: true)\n   * By default, format encoders share a global encoding buffer for performance\n   * and memory management reasons.\n   *\n   * When set to false, each format is allocated an individual encoding buffer.\n   *\n   * Enable to maximise performance and memory re-use, just be cautious of\n   * possible race conditions.\n   */\n  useGlobalEncodingBuffer: boolean,\n\n  /**\n   * (default: 1500)\n   * The maximum bytes that can be allocated to an encoding buffer.\n   *\n   * Default is 1500 bytes, the standard \"Maximum Transmission Unit\".\n   */\n  encodingBufferMaxSize: number,\n\n  /**\n   * (default: 256)\n   * Initial bytes to allocate for an encoding buffer.\n   */\n  encodingBufferInitialSize: number,\n\n  /**\n   * (default: 256)\n   * Additional bytes to allocated when dynamically increasing the size of an encoding buffer.\n   */\n  encodingBufferIncrement: number,\n};\n\n/** @internal */\nexport let cfg: TinybufConfig = {\n  safe: false,\n  useGlobalEncodingBuffer: true,\n  encodingBufferMaxSize: MTU,\n  encodingBufferInitialSize: 256,\n  encodingBufferIncrement: 256,\n};\n","import { cfg } from \"../config\";\nimport { TinybufError } from \"./errors\";\n\n/**\n * Wraps a buffer with a write head pointer.\n *\n * @internal\n */\nexport class BufferWriter {\n  public i: number = 0;\n  public _$dataView: DataView;\n\n  public constructor(initialSize: number) {\n    this._$dataView = new DataView(new ArrayBuffer(initialSize));\n  }\n\n  public $viewBytes(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset, this.i);\n  }\n\n  public $copyBytes(): Uint8Array {\n    return new Uint8Array(this._$dataView.buffer.slice(0, this.i));\n  }\n\n  // ----- Writers: -----\n\n  public $writeInt8(value: number): void {\n    this._$dataView.setInt8(this._$alloc(1), value);\n  }\n\n  public $writeInt16(value: number): void {\n    this._$dataView.setInt16(this._$alloc(2), value, true);\n  }\n\n  public $writeInt32(value: number): void {\n    this._$dataView.setInt32(this._$alloc(4), value, true);\n  }\n\n  public $writeUint8(value: number): void {\n    this._$dataView.setUint8(this._$alloc(1), value);\n  }\n\n  public $writeUint16(value: number): void {\n    this._$dataView.setUint16(this._$alloc(2), value, false); // big-endian for varint\n  }\n\n  public $writeUint32(value: number): void {\n    this._$dataView.setUint32(this._$alloc(4), value, false); // big-endian for varint\n  }\n\n  public $writeFloat32(value: number): void {\n    this._$dataView.setFloat32(this._$alloc(4), value, true);\n  }\n\n  public $writeFloat64(value: number): void {\n    this._$dataView.setFloat64(this._$alloc(8), value, true);\n  }\n\n  public $writeBytes(b: Uint8Array | ArrayBuffer | ArrayBufferView): void {\n    // allocate bytes first\n    const j = this._$alloc(b.byteLength);\n\n    let bBytes: Uint8Array = ArrayBuffer.isView(b)\n      ? b instanceof Uint8Array ? b : new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n      : new Uint8Array(b);\n\n    // copy bytes\n    new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset + j, b.byteLength).set(bBytes);\n  }\n\n  // ----- Private methods: -----\n\n  /** @returns writer head (byteOffset) */\n  private _$alloc(bytes: number): number {\n    if (this.i + bytes > this._$dataView.byteLength) {\n      const minBytesNeeded = this.i + bytes - this._$dataView.byteLength;\n      const requestedNewBytes = Math.ceil(minBytesNeeded / cfg.encodingBufferIncrement) * cfg.encodingBufferIncrement;\n      this._$resizeBuffer(this._$dataView.byteLength + requestedNewBytes);\n    }\n\n    const j = this.i;\n    this.i += bytes;\n\n    return j;\n  }\n\n  private _$resizeBuffer(newSize: number): void {\n    if (newSize > cfg.encodingBufferMaxSize) {\n      // safety check\n      throw new TinybufError(`exceeded encodingBufferMaxSize: ${cfg.encodingBufferMaxSize}`);\n    }\n\n    const newBuf = new ArrayBuffer(newSize);\n\n    // copy bytes\n    const oldView = new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset, this._$dataView.byteLength);\n    new Uint8Array(newBuf).set(oldView);\n\n    // update ref\n    this._$dataView = new DataView(newBuf);\n  }\n}\n","/**\n * Wraps a buffer with a read head pointer.\n *\n * @internal\n */\nexport class BufferReader {\n  public i: number;\n  private _$dataView: DataView;\n\n  public constructor(b: Uint8Array | ArrayBufferView | ArrayBuffer, headerBytes?: number) {\n    this._$dataView = ArrayBuffer.isView(b)\n      ? new DataView(b.buffer, b.byteOffset, b.byteLength)\n      : new DataView(b);\n\n    this.i = headerBytes ?? 0; // internal offset (header)\n  }\n\n  /** Read the next byte, without moving the read head pointer. */\n  public $peek(): number {\n    return this._$dataView.getUint8(this.i);\n  }\n\n  /** Skip the next byte without reading it. */\n  public $skip(): void {\n    this.i++;\n  }\n\n  // ----- Readers: -----\n\n  public $readUint8(): number {\n    return this._$dataView.getUint8(this.i++);\n  }\n\n  public $readUint16(): number {\n    const r = this._$dataView.getUint16(this.i); // big-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readUint32(): number {\n    const r = this._$dataView.getUint32(this.i); // big-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readInt8(): number {\n    return this._$dataView.getInt8(this.i++);\n  }\n\n  public $readInt16(): number {\n    const r = this._$dataView.getInt16(this.i, true); // little-endian\n    this.i += 2;\n    return r;\n  }\n\n  public $readInt32(): number {\n    const r = this._$dataView.getInt32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat32(): number {\n    const r = this._$dataView.getFloat32(this.i, true); // little-endian\n    this.i += 4;\n    return r;\n  }\n\n  public $readFloat64(): number {\n    const r = this._$dataView.getFloat64(this.i, true); // little-endian\n    this.i += 8;\n    return r;\n  }\n\n  /** @throws RangeError if exceeds length */\n  public $readBytes(bytes: number): Uint8Array {\n    if (this._$dataView.byteOffset + this.i + bytes > this._$dataView.byteLength) {\n      throw new RangeError('exceeded bytes');\n    }\n\n    const view = new Uint8Array(this._$dataView.buffer, this._$dataView.byteOffset + this.i, bytes);\n    this.i += bytes;\n\n    return view;\n  }\n}\n","/**\n * Field types for defining encoding formats.\n *\n * @see [Types](https://github.com/reececomo/tinybuf/blob/main/docs/types.md)\n */\nexport const enum Type {\n  /**\n   * Unsigned integer (1 - 8 bytes).\n   * - 0 → 127 = 1 byte\n   * - 128 → 16,384 = 2 bytes\n   * - 16,385 → 536,870,911 = 4 bytes\n   * - 536,870,912 → `Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  UInt,\n\n  /** Unsigned 8-bit integer (between 0 and 255, 1 byte). */\n  UInt8,\n\n  /** Unsigned 16-bit integer (between 0 and 65,535, 2 bytes). */\n  UInt16,\n\n  /** Unsigned 32-bit integer (between 0 and 4,294,967,295, 4 bytes). */\n  UInt32,\n\n  /**\n   * Signed integer (1 - 8 bytes).\n   * - 0 → ±64 = 1 byte\n   * - ±65 → ±8,192 = 2 bytes\n   * - ±8,193 → ±268,435,456 = 4 bytes\n   * - ±268,435,457 → ±`Number.MAX_SAFE_INTEGER` = 8 bytes\n   */\n  Int,\n\n  /** Signed 1 byte integer (between -127 and 127). */\n  Int8,\n\n  /** Signed 2 byte integer (between -32,767 and 32,767). */\n  Int16,\n\n  /** Signed 4 byte integer (between -2,147,483,647 and 2,147,483,647). */\n  Int32,\n\n  /** Default JavaScript `number` type. Floating-point number (64-bit, double precision, 8 bytes). */\n  Float64,\n\n  /** Floating-point number (32-bit, single precision, 4 bytes). */\n  Float32,\n\n  /**\n   * Floating-point number (16-bit in FP16 format, half precision, 2 bytes).\n   *\n   * **Warning:** Low precision; maximum range: ±65,504.\n   */\n  Float16,\n\n  /**\n   * Floating-point number (16-bit in BF16 format, half precision, 2 bytes).\n   *\n   * **Warning:** Very low precision.\n   */\n  BFloat16,\n\n  /** A cheap, low-resolution signed scalar between -1.00 and 1.00 (1 byte). */\n  Scalar8,\n\n  /** A cheap, low-resolution unsigned scalar between 0.00 and 1.00 (1 byte). */\n  UScalar8,\n\n  /**\n   * Boolean value (1 byte).\n   * @see {Bools} for packing multiple booleans into a single byte.\n   */\n  Bool,\n\n  /** Any array of booleans (1 bit overhead, encoded as UInt). */\n  Bools,\n\n  /** Any ArrayBuffer or ArrayBufferView (e.g. Uint8Array) value (encoded as 1 x UInt for byte length + buffer bytes). */\n  Buffer,\n\n  /** A UTF-8 string (encoded as 1 x UInt for UTF-8 byte length + UTF-8 bytes). */\n  String,\n\n  /** Any JSON-serializable data. Encodes as a UTF-8 string. */\n  JSON,\n\n  /** JavaScript regular expression. */\n  RegExp,\n\n  /**\n   * JavaScript date object.\n   *\n   * Encoded as an 8 byte (64-bit) integer UTC timestamp from as the number\n   * of milliseconds since the Unix Epoch (January 1, 1970, 00:00:00 UTC).\n   *\n   * @see {Date}\n   */\n  Date,\n}\n\n/**\n * Mappings for the value types.\n */\nexport type ValueTypes = {\n  [Type.Int]: number;\n  [Type.Int8]: number;\n  [Type.Int16]: number;\n  [Type.Int32]: number;\n  [Type.UInt]: number;\n  [Type.UInt8]: number;\n  [Type.UInt16]: number;\n  [Type.UInt32]: number;\n  [Type.Float64]: number;\n  [Type.Float32]: number;\n  [Type.Float16]: number;\n  [Type.BFloat16]: number;\n  [Type.Scalar8]: number;\n  [Type.UScalar8]: number;\n  [Type.Bool]: boolean;\n  [Type.Bools]: boolean[];\n  [Type.Buffer]: Uint8Array | ArrayBuffer | ArrayBufferView;\n  [Type.String]: string;\n  [Type.JSON]: any;\n  [Type.RegExp]: RegExp;\n  [Type.Date]: Date;\n};\n\n/** @throws any error too */\nexport type ValidationFn<T> = (x: T) => undefined | boolean | Error;\nexport type TransformFn<T> = (x: T) => T;\nexport type Transforms<T> = TransformFn<T> | [preEncode: TransformFn<T>] | [preEncode: TransformFn<T> | undefined, postDecode: TransformFn<T> | undefined];\n\n/**\n * A wrapper around any Type definition that declares it as optional.\n */\nexport class MaybeType<T extends FieldDefinition> {\n  public constructor(public type: T) {}\n}\n\n/**\n * Wrap any definition as optional.\n */\nexport function optional<T extends FieldDefinition>(t: T): MaybeType<T> {\n  return new MaybeType(t);\n}\n\n/**\n * A definition for an object binary encoder.\n */\nexport type EncoderDefinition = {\n  [key: string]: FieldDefinition | MaybeType<FieldDefinition>;\n};\n\n/**\n * Definition for an object-field binary encoder.\n */\nexport type FieldDefinition = keyof ValueTypes | [keyof ValueTypes] | EncoderDefinition | [EncoderDefinition] | MaybeType<FieldDefinition>;\n\n/**\n * The resulting type of the decoded data, based on the encoder definition.\n */\nexport type InferredDecodedType<EncoderType extends EncoderDefinition> = {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends MaybeType<any> ? never : EKey]: EncoderType[EKey] extends keyof ValueTypes\n      ? ValueTypes[EncoderType[EKey]]\n      : EncoderType[EKey] extends [keyof ValueTypes]\n        ? Array<ValueTypes[EncoderType[EKey][0]]>\n        : EncoderType[EKey] extends EncoderDefinition\n          ? InferredDecodedType<EncoderType[EKey]>\n          : EncoderType[EKey] extends [EncoderDefinition]\n            ? Array<InferredDecodedType<EncoderType[EKey][number]>>\n            : never;\n} & {\n  [EKey in keyof EncoderType as EncoderType[EKey] extends MaybeType<any> ? EKey : never]?: EncoderType[EKey] extends MaybeType<infer OptionalValue extends keyof ValueTypes>\n    ? ValueTypes[OptionalValue] | undefined\n    : EncoderType[EKey] extends MaybeType<infer OptionalValue extends [keyof ValueTypes]>\n      ? Array<ValueTypes[OptionalValue[0]]> | undefined\n      : EncoderType[EKey] extends MaybeType<infer OptionalValue extends EncoderDefinition>\n        ? InferredDecodedType<OptionalValue> | undefined\n        : never;\n};\n\nexport type InferredTransformConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? Transforms<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? Transforms<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredTransformConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredTransformConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends MaybeType<infer OptionalValue extends keyof ValueTypes>\n            ? Transforms<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends MaybeType<infer OptionalValue extends [keyof ValueTypes]>\n              ? Transforms<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends MaybeType<infer OptionalValue extends EncoderDefinition>\n                ? InferredTransformConfig<OptionalValue> | undefined\n                : never;\n};\n\nexport type InferredValidationConfig<EncoderType extends EncoderDefinition> = {\n [EKey in keyof EncoderType]?: EncoderType[EKey] extends keyof ValueTypes\n     ? ValidationFn<ValueTypes[EncoderType[EKey]]>\n     : EncoderType[EKey] extends [keyof ValueTypes]\n       ? ValidationFn<ValueTypes[EncoderType[EKey][0]]>\n       : EncoderType[EKey] extends EncoderDefinition\n         ? InferredValidationConfig<EncoderType[EKey]>\n         : EncoderType[EKey] extends [EncoderDefinition]\n           ? InferredValidationConfig<EncoderType[EKey][number]>\n           : EncoderType[EKey] extends MaybeType<infer OptionalValue extends keyof ValueTypes>\n            ? ValidationFn<ValueTypes[OptionalValue]>\n            : EncoderType[EKey] extends MaybeType<infer OptionalValue extends [keyof ValueTypes]>\n              ? ValidationFn<ValueTypes[OptionalValue[0]]>\n              : EncoderType[EKey] extends MaybeType<infer OptionalValue extends EncoderDefinition>\n                ? InferredValidationConfig<OptionalValue> | undefined\n                : never;\n};\n","import { writers, readers } from './lib/coders';\nimport * as coders from './lib/coders';\nimport { $hashCode, $strToHashCode } from './lib/hashCode';\nimport { peekHeader, peekHeaderStr } from './lib/peek';\nimport { BufferWriter } from './lib/BufferWriter';\nimport { BufferReader } from './lib/BufferReader';\nimport {\n  InferredDecodedType,\n  EncoderDefinition,\n  Type,\n  MaybeType,\n  InferredTransformConfig,\n  InferredValidationConfig,\n  ValidationFn,\n  Transforms,\n  FieldDefinition\n} from './Type';\nimport { cfg } from './config';\n\nexport type FormatHeader = string | number;\n\n/**\n * Decoded object types for a given binary format.\n * @example let onData = (data: Decoded<typeof MyBufferFormat>) => {...};\n */\nexport type Decoded<FromBufferFormat> = FromBufferFormat extends BufferFormat<infer EncoderType, any> ? InferredDecodedType<EncoderType> : never;\n\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(def: T): BufferFormat<T, HeaderType>;\n/**\n * Defines a format for encoding/decoding binary buffers.\n *\n * Optionally customize the identifier, either as a 2-byte string, an unsigned integer (0 -> 65,535), or as `null` to disable entirely.\n *\n * @example\n * const MyFormat = defineFormat({ ... });\n * const MyFormat = defineFormat('ab', { ... });\n * const MyFormat = defineFormat(1234, { ... });\n * const MyFormat = defineFormat(null, { ... });\n */\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(h: HeaderType | null, def: T): BufferFormat<T, HeaderType>;\nexport function defineFormat<T extends EncoderDefinition, HeaderType extends string | number = number>(a?: HeaderType | T, b?: T): BufferFormat<T, HeaderType> {\n  return a !== null && typeof a === 'object'\n    ? new BufferFormat<T, HeaderType>(a as T)\n    : new BufferFormat<T, HeaderType>(b as T, a as HeaderType);\n}\n\nfunction isValidHeader(h: FormatHeader): boolean {\n  if (typeof h === 'number') return Number.isInteger(h) && h >= 0 && h <= 65_535;\n  if (typeof h === 'string') return new TextEncoder().encode(h).byteLength === 2;\n  return false;\n}\n\n/**\n * BufferFormat is a utility class for encoding and decoding binary data based\n * on a provided encoding format.\n *\n * @see {header}\n * @see {encode(data)}\n * @see {decode(binary)}\n */\nexport class BufferFormat<EncoderType extends EncoderDefinition, HeaderType extends FormatHeader = number> {\n  /** @internal */\n  private static _$globalWriter?: BufferWriter;\n\n  /**\n   * A unique identifier encoded as the first 2 bytes (or `undefined` if headerless).\n   *\n   * @see {peekHeader(...)}\n   * @see {peekHeaderStr(...)}\n   */\n  public header!: HeaderType;\n\n  /** @internal */\n  private _$header!: number; // always uint16 vesion\n  /** @internal */\n  private _$type!: Type;\n  /** @internal */\n  private _$fields!: Field[];\n  /** @internal */\n  private _$fieldsMap!: Map<string, Field>;\n\n  /** @internal */\n  private _$format?: string;\n  /** @internal */\n  private _$transforms?: Transforms<any> | undefined;\n  /** @internal */\n  private _$validate?: ValidationFn<any> | undefined;\n  /** @internal */\n  private _$hasValidationOrTransforms = false;\n  /** @internal */\n  private _$writer?: BufferWriter;\n\n  public get encodingBuffer(): DataView | undefined {\n    return this._$writer?._$dataView;\n  }\n\n  public constructor(\n    def: EncoderType,\n    header?: HeaderType | null,\n  ) {\n    // set definition\n    if (typeof def === 'number' && def >= Type.UInt && def <= Type.Date) {\n      this._$type = def;\n    }\n    else if (def instanceof MaybeType) {\n      throw new TypeError('Format cannot be optional');\n    }\n    else if (def instanceof Object) {\n      this._$type = undefined; // object\n      this._$fieldsMap = new Map();\n      this._$fields = Object.keys(def).map((name) => {\n        const f = new Field(name, def[name]);\n        this._$fieldsMap.set(name, f); // also set map entry\n        return f;\n      });\n\n      // set headers\n      if (header === undefined) {\n        this.header = $hashCode(this.f) as HeaderType; // automatic\n        this._$header = this.header as number;\n      }\n      else if (header === null) {\n        this.header = undefined; // headerless\n        this._$header = undefined;\n      }\n      else if (isValidHeader(header)) {\n        this.header = header; // manual\n        this._$header = typeof header === 'number' ? header : $strToHashCode(header);\n      }\n      else {\n        throw new TypeError(`Header must be uint16, 2 byte string, or null. Received: ${header}`);\n      }\n    }\n    else {\n      throw new TypeError('Format must be object or Type');\n    }\n  }\n\n  // ----- Static methods: -----\n\n  /**\n   * Read the header of a buffer as a number.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeader = peekHeader;\n\n  /**\n   * Read the header of a buffer as a string.\n   *\n   * @see {header}\n   * @throws {RangeError} if buffer size < 2\n   */\n  public static peekHeaderStr = peekHeaderStr;\n\n  // ----- Accessors: -----\n\n  /**\n   * @example \"{uint8,str[]?}\"\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private get f(): string {\n    if (this._$format === undefined) {\n      this._$format = this._$fields !== undefined\n        ? `{${this._$fields.map(v => v.f).join(',')}}`\n        : `${this._$type}`;\n    }\n\n    return this._$format;\n  }\n\n  /** @internal */\n  private static _$initWriter(): BufferWriter {\n    if (cfg.useGlobalEncodingBuffer) {\n      if (!BufferFormat._$globalWriter) {\n        // lazy init: global encoding buffer created at max size\n        this._$globalWriter = new BufferWriter(cfg.encodingBufferInitialSize);\n      }\n\n      return this._$globalWriter;\n    }\n\n    return new BufferWriter(cfg.encodingBufferInitialSize);\n  }\n\n  /**\n   * Encode an object to bytes.\n   *\n   * **Warning:** Returns an unsafe view into the encoding buffer. Pass this reference to preserve\n   * performance, and to minimize memory allocation and fragmentation.\n   *\n   * @param data - data to encode\n   * @param preserveBytes - (default: `setTinybufConfig().safe`) When set to true, copies encoded\n   * bytes to a new buffer. When set to false, returns an unsafe view of bytes but prevents\n   * unnnecessary memory allocation and fragmentation.\n   *\n   * @returns a copy of encoded bytes\n   * @throws if fails to encode value to schema\n   */\n  public encode<DecodedType extends InferredDecodedType<EncoderType>>(\n    data: DecodedType,\n    preserveBytes?: boolean,\n  ): Uint8Array {\n    if (!this._$writer) {\n      // lazy init\n      this._$writer = BufferFormat._$initWriter();\n    }\n\n    // reset\n    this._$writer.i = 0;\n\n    if (this._$hasValidationOrTransforms) {\n      data = this._$preprocess(data);\n    }\n\n    this._$write(data, this._$writer);\n\n    return (preserveBytes ?? cfg.safe)\n      ? this._$writer.$copyBytes()\n      : this._$writer.$viewBytes();\n  }\n\n  /**\n   * Decode binary data to an object.\n   * @throws if fails to decode bytes to schema.\n   */\n  public decode<DecodedType = InferredDecodedType<EncoderType>>(\n    bytes: Uint8Array | ArrayBufferView | ArrayBuffer,\n    decodeInto?: Partial<DecodedType>,\n  ): DecodedType {\n    return this._$read(new BufferReader(bytes, this.header === undefined ? 0 : 2), decodeInto);\n  }\n\n  /**\n   * Set additional transform functions to apply before encoding and after decoding.\n   */\n  public setTransforms(transforms: InferredTransformConfig<EncoderType> | Transforms<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (typeof transforms === 'function' || (Array.isArray(transforms) && typeof transforms[0]  === 'function')) {\n      this._$transforms = transforms;\n    }\n    else {\n      for (const name of Object.keys(transforms)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set transforms for field '${name}'`);\n        }\n\n        // Set validation for object.\n        field.$coder.setTransforms(transforms[name]);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Set additional validation rules which are applied on encode() and decode().\n   *\n   * - Validation functions should throw an error, return an error, or return boolean false.\n   * - Anything else is treated as successfully passing validation.\n   */\n  public setValidation(validations: InferredValidationConfig<EncoderType> | ValidationFn<any>): this {\n    this._$hasValidationOrTransforms = true;\n\n    if (typeof validations === 'function') {\n      this._$validate = validations;\n    }\n    else {\n      for (const name of Object.keys(validations)) {\n        const field = this._$fieldsMap.get(name);\n        if (!field) {\n          throw new TypeError(`Failed to set validation function for field '${name}'`);\n        }\n\n        field.$coder.setValidation(validations[name]);\n      }\n    }\n\n    return this;\n  }\n\n  // ----- Implementation: -----\n\n  /**\n   * @param value\n   * @param bw\n   * @throws if the value is invalid\n   *\n   * @internal\n   */\n  private _$write(value: any, bw: BufferWriter): void {\n    // write header\n    if (this._$header !== undefined) bw.$writeUint16(this._$header);\n\n    // write scalar\n    if (this._$type !== undefined) {\n      const safeValue = (this._$validate || this._$transforms) ? this._$preprocess(value) : value;\n\n      return writers[this._$type](safeValue, bw);\n    }\n\n    // check for object type\n    if (typeof value !== 'object' || !value) {\n      throw new TypeError('expected object type');\n    }\n\n    // write each field\n    for (const field of this._$fields) {\n      const subValue = value[field.$name];\n\n      if (field.$isOptional) {\n        if (subValue === undefined || subValue === null) {\n          coders.boolCoder.$write(false, bw);\n          continue; // skip\n        }\n        else {\n          coders.boolCoder.$write(true, bw);\n        }\n      }\n      else if (subValue == null) {\n        throw new Error(`missing required value: ${field.$name}`);\n      }\n\n      if (field.$isArray) {\n        // array\n        this._$writeArray(subValue, bw, field.$coder);\n        continue;\n      }\n\n      // scalar/object field\n      field.$coder._$write(subValue, bw);\n    }\n  }\n\n  /**\n   * pre-process: validation and/or transforms\n   * @internal\n   */\n  private _$preprocess<T extends Record<string, any>>(data: T): T {\n    if (this._$validate) this._$processValidation(data);\n\n    if (typeof this._$transforms === 'function') {\n      return this._$transforms(data);\n    }\n    else if (Array.isArray(this._$transforms) && typeof this._$transforms[0] === 'function') {\n      return this._$transforms[0](data);\n    }\n\n    return data;\n  }\n\n  /**\n   * post-process: validation and/or transforms\n   * @internal\n   */\n  private _$postprocess<T extends Record<string, any>>(data: T): T {\n    if (Array.isArray(this._$transforms) && typeof this._$transforms[1] === 'function') {\n      data = this._$transforms[1](data);\n    }\n\n    if (this._$validate) this._$processValidation(data);\n\n    return data;\n  }\n\n  private _$processValidation(data: any): void {\n    if (!this._$validate) return;\n    const res = this._$validate(data);\n    if (res instanceof Error) throw res;\n    if (res === false) throw new Error('failed validation');\n  }\n\n  /**\n   * This function will be executed only the first time\n   * After that, we'll compile the read routine and add it directly to the instance\n   * @param state\n   * @returns\n   * @throws if fails\n   *\n   * @internal\n   */\n  private _$read<DecodedType = InferredDecodedType<EncoderType>>(state: BufferReader, obj?: Partial<DecodedType>): DecodedType {\n    // This function will be executed only the first time to compile the read routine.\n    // After that, we'll compile the read routine and add it directly to the instance\n\n    // Update the read method implementation.\n    this._$read = this._$compileFormatReadFn();\n\n    return this._$read(state, obj);\n  }\n\n  /**\n   * Generate read function code for this coder.\n   *\n   * @example\n   * let v=o??{};\n   * v.prop1=this._$readField(0,s,o);\n   * v.prop2=this._$readField(1,s,o);\n   * return v\n   *\n   * @internal\n   */\n  private _$makeObjectReadFnBody(): string {\n    const fieldsStr: string = this._$fields\n      .map(({ $name: n }, i) => `v.${n}=this.${this._$readField.name}(${i},s,v.${n})`)\n      .join(';');\n\n    return `let v=o??{};${fieldsStr};return v;`;\n  }\n\n  /**\n   * Read an individual field.\n   * @internal\n   */\n  private _$readField(fieldIndex: number, state: BufferReader, obj?: any): any {\n    const field = this._$fields[fieldIndex];\n\n    if (field.$isOptional && !coders.boolCoder.$read(state)) {\n      return undefined;\n    }\n\n    if (field.$isArray) {\n      return this._$readArray(field.$coder, state, obj);\n    }\n\n    return field.$coder._$read(state, obj);\n  }\n\n  /**\n   * Compile the decode() method for this object.\n   *\n   * @internal\n   */\n  private _$compileFormatReadFn<DecodedType = InferredDecodedType<EncoderType>>(): (state: BufferReader, obj: Partial<DecodedType> | undefined) => DecodedType {\n    if (this._$type !== undefined) {\n      // scalar type\n      return this._$hasValidationOrTransforms\n        ? (s) => this._$postprocess(readers[this._$type](s))\n        : readers[this._$type];\n    }\n\n    // object type\n    return new Function('s', 'o',  this._$makeObjectReadFnBody()) as any;\n  }\n\n  /**\n   * @internal\n   */\n  private _$writeArray(value: any[], bw: BufferWriter, type: BufferFormat<any, any>): void {\n    if (!Array.isArray(value)) {\n      throw new TypeError(`expected array, instead got: ${value}`);\n    }\n\n    coders.uintCoder.$write(value.length, bw);\n    for (let i = 0; i < value.length; i++) {\n      type._$write(value[i], bw);\n    }\n  }\n\n  /**\n   * @throws if invalid data\n   * @internal\n   */\n  private _$readArray<T extends EncoderDefinition>(type: BufferFormat<T, any>, state: any, obj?: Array<T>): Array<T> {\n    const len = coders.uintCoder.$read(state);\n    const arr = obj?.length === len ? obj : new Array(len);\n    for (let j = 0; j < arr.length; j++) {\n      arr[j] = type._$read(state, obj?.[j]);\n    }\n    return arr;\n  }\n}\n\n/**\n * Parses and represents an object field.\n *\n * @internal\n */\nclass Field {\n  public $name: string;\n  public $coder: BufferFormat<any>;\n  public $isOptional: boolean;\n  public $isArray: boolean;\n\n  private _$formatString?: string;\n\n  public constructor(name: string, rawType: FieldDefinition) {\n    this.$isOptional = rawType instanceof MaybeType;\n    let type = rawType instanceof MaybeType ? rawType.type : rawType;\n\n    this.$name = name;\n\n    if (Array.isArray(type)) {\n      if (type.length !== 1) {\n        throw new TypeError('Array type must contain exactly one format');\n      }\n\n      type = type[0];\n      this.$isArray = true;\n    }\n    else {\n      this.$isArray = false;\n    }\n\n    this.$coder = new BufferFormat<any>(type, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public get f(): string {\n    if (this._$formatString === undefined) {\n      this._$formatString = `${(this.$coder as any).f}${this.$isArray ? '[]' : ''}${this.$isOptional ? '?' : ''}`;\n    }\n\n    return this._$formatString;\n  }\n}\n"],"names":["TinybufError","Error","$hashCode","str","hash","i","length","charCodeAt","$strToHashCode","$hashCodeToStr","hashCode","String","fromCharCode","Math","floor","peekHeader","b","ArrayBuffer","isView","DataView","buffer","byteOffset","getUint16","peekHeaderStr","bufferParser","BufferParser","constructor","this","_$formats","Map","_$data","processBuffer","f","data","cb","r","header","has","get","_a","decode","set","e","err","stack","on","format","callback","decodeInPlace","ignore","forEach","clear","$floor","$ceil","ceil","$clamp","value","min","max","$roundTowardZero","x","$roundAwayFromZero","uscalround","$fromuscal8","$touscal8","scalround","$fromscal8","$toscal8","mask","padBit","reduce","n","unmask","l","len","undefined","clz32","Array","isArray","val","$utf8encode","encoder","TextEncoder","encode","$utf8decode","decoder","TextDecoder","y","f16round","$fromf16","$tof16","Float32Array","Int32Array","s","z","pow","d","m","Infinity","NaN","Uint32Array","bf16round","MAX_VARUINT32","MAX_VARINT32","POW_32","uintCoder","$write","writer","Number","$writeUint8","$writeUint16","$writeUint32","$read","reader","firstByte","$peek","$readUint32","$readUint16","$skip","uint8Coder","$readUint8","uint16Coder","uint32Coder","intCoder","int8Coder","$writeInt8","$readInt8","int16Coder","$writeInt16","$readInt16","int32Coder","$writeInt32","$readInt32","bfloat16Coder","$tobf16","$frombf16","float16Coder","float32Coder","$writeFloat32","$readFloat32","float64Coder","$writeFloat64","$readFloat64","uscalar8Coder","scalar8Coder","dateCoder","getTime","Date","bufferCoder","byteLength","$writeBytes","$readBytes","stringCoder","boolCoder","boolsCoder","slice","p","jsonCoder","JSON","stringify","parse","regexCoder","global","ignoreCase","multiline","source","g","RegExp","writers","readers","setTinybufConfig","c","cfg","Object","assign","safe","useGlobalEncodingBuffer","encodingBufferMaxSize","encodingBufferInitialSize","encodingBufferIncrement","BufferWriter","initialSize","_$dataView","$viewBytes","Uint8Array","$copyBytes","setInt8","_$alloc","setInt16","setInt32","setUint8","setUint16","setUint32","setFloat32","setFloat64","j","bBytes","bytes","minBytesNeeded","requestedNewBytes","_$resizeBuffer","newSize","newBuf","oldView","BufferReader","headerBytes","getUint8","getUint32","getInt8","getInt16","getInt32","getFloat32","getFloat64","RangeError","view","MaybeType","type","optional","t","defineFormat","a","BufferFormat","encodingBuffer","_$writer","def","_$hasValidationOrTransforms","_$type","TypeError","_$fieldsMap","_$fields","keys","map","name","Field","_$header","isValidHeader","h","isInteger","_$format","v","join","_$initWriter","_$globalWriter","preserveBytes","_$preprocess","_$write","decodeInto","_$read","setTransforms","transforms","_$transforms","field","$coder","setValidation","validations","_$validate","bw","safeValue","subValue","$name","$isOptional","coders.boolCoder","$isArray","_$writeArray","_$processValidation","_$postprocess","res","state","obj","_$compileFormatReadFn","_$makeObjectReadFnBody","fieldsStr","_$readField","fieldIndex","_$readArray","Function","coders.uintCoder","arr","rawType","_$formatString"],"mappings":"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"}